/*
Deployment script for AirPortDB

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "AirPortDB"
:setvar DefaultFilePrefix "AirPortDB"
:setvar DefaultDataPath "C:\Users\dackayne\AppData\Local\Microsoft\VisualStudio\SSDT"
:setvar DefaultLogPath "C:\Users\dackayne\AppData\Local\Microsoft\VisualStudio\SSDT"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Creating [KrisDemyda]...';


GO
CREATE USER [KrisDemyda] FOR LOGIN [KrisDemyda];


GO
REVOKE CONNECT TO [KrisDemyda];


GO
PRINT N'Creating [NazarHolub]...';


GO
CREATE USER [NazarHolub] FOR LOGIN [NazarHolub];


GO
REVOKE CONNECT TO [NazarHolub];


GO
PRINT N'Creating [RuslanVoityk]...';


GO
CREATE USER [RuslanVoityk] FOR LOGIN [RuslanVoityk];


GO
REVOKE CONNECT TO [RuslanVoityk];


GO
PRINT N'Creating [ViktorRikaluk]...';


GO
CREATE USER [ViktorRikaluk] FOR LOGIN [ViktorRikaluk];


GO
REVOKE CONNECT TO [ViktorRikaluk];


GO
PRINT N'Creating [VovaVasilishin]...';


GO
CREATE USER [VovaVasilishin] FOR LOGIN [VovaVasilishin];


GO
REVOKE CONNECT TO [VovaVasilishin];


GO
PRINT N'Creating [AircompanyManager]...';


GO
CREATE ROLE [AircompanyManager]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [Dispatchers]...';


GO
CREATE ROLE [Dispatchers]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [TicketBuyer]...';


GO
CREATE ROLE [TicketBuyer]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [TopManagers]...';


GO
CREATE ROLE [TopManagers]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating <unnamed>...';


GO
EXECUTE sp_addrolemember @rolename = N'AircompanyManager', @membername = N'KrisDemyda';


GO
PRINT N'Creating <unnamed>...';


GO
EXECUTE sp_addrolemember @rolename = N'Dispatchers', @membername = N'VovaVasilishin';


GO
PRINT N'Creating <unnamed>...';


GO
EXECUTE sp_addrolemember @rolename = N'Dispatchers', @membername = N'RuslanVoityk';


GO
PRINT N'Creating <unnamed>...';


GO
EXECUTE sp_addrolemember @rolename = N'TicketBuyer', @membername = N'ViktorRikaluk';


GO
PRINT N'Creating <unnamed>...';


GO
EXECUTE sp_addrolemember @rolename = N'TopManagers', @membername = N'NazarHolub';


GO
PRINT N'Creating [dbo].[AutoArrived]...';


GO
--Триггер на формування статусу "прибув"
CREATE TRIGGER [AutoArrived]
ON [dbo].[Event]
FOR INSERT, UPDATE
AS
	DECLARE @EventType NVARCHAR (50) = (SELECT [e_eventType] FROM inserted);
	DECLARE @idFlight INT = (SELECT [e_fl_id_FK] FROM inserted);
	IF (@EventType = N'Прибув')
	BEGIN
		UPDATE [dbo].[Flight]
		SET [fl_status] = N'Прибув'
		WHERE [fl_id] = @idFlight
	END
GO
PRINT N'Creating [dbo].[NoArriveWithoutStart]...';


GO
--Триггер, який перевіряє, при вставці "прибув" чи вже існує запис про отравлення
CREATE TRIGGER [NoArriveWithoutStart]
ON [dbo].[Event] 
AFTER INSERT, UPDATE
AS
	DECLARE @idFlight INT = (SELECT [e_fl_id_FK] FROM inserted);
	DECLARE @EventCount INT;
	DECLARE @EventType NVARCHAR(50) = (SELECT [e_eventType] FROM inserted);
	SET @EventCount = (SELECT COUNT (*)
	FROM [dbo].[Event]
	WHERE [e_fl_id_FK] = @idFlight AND [e_eventType] = N'Вилетів');
	IF (@EventCount = 0 AND @EventType = N'Прибув')
	BEGIN
		RAISERROR (N'Літак не може прибути, так як він не вилетів. Створіть подію виліту.', 5, 2);
		ROLLBACK TRAN;
	END
GO
PRINT N'Creating [dbo].[NoEventsIfCancelled]...';


GO
--Триггер, що забороняє створювати події, якщо рейс скасовано
CREATE TRIGGER [NoEventsIfCancelled]
ON [dbo].[Event]
AFTER INSERT, UPDATE
AS
	DECLARE @CountCancelEvents INT;
	DECLARE @idFlight INT = (SELECT [e_fl_id_FK] FROM inserted);
	SET @CountCancelEvents = (
	SELECT COUNT (*) 
	FROM [dbo].[UnexpectedEvent] 
	WHERE [uE_fl_id_FK] = @idFlight AND [uE_eventType] = N'Скасовано');
	IF (@CountCancelEvents >= 1)
	BEGIN
		RAISERROR (N'Рейс скасовано, створити подію неможливоо.', 5, 1)
		ROLLBACK TRAN;
	END
GO
PRINT N'Creating [dbo].[NoMoreThanOneArrivalEvent]...';


GO
--Триггер, який перевіряє, що для кожного рейсу не більше однієї події "прибув"
CREATE TRIGGER [NoMoreThanOneArrivalEvent]
ON [dbo].[Event] 
AFTER INSERT, UPDATE
AS
	DECLARE @idFlight INT = (SELECT [e_fl_id_FK] FROM inserted);
	DECLARE @EventCount INT;
	SET @EventCount = (SELECT COUNT (*)
	FROM [dbo].[Event]
	WHERE [e_fl_id_FK] = @idFlight AND [e_eventType] = N'Прибув');
	IF (@EventCount > 1)
	BEGIN
		RAISERROR (N'Літак не може прибути 2 рази підряд. Така подія вже існує.', 5, 2);
		ROLLBACK TRAN;
	END
GO
PRINT N'Creating [dbo].[NoMoreThanOneStartEvent]...';


GO
--Триггер, який перевіряє, що для кожного рейсу не більше однієї події "вилетів"
CREATE TRIGGER [NoMoreThanOneStartEvent]
ON [dbo].[Event] 
AFTER INSERT, UPDATE
AS
	DECLARE @idFlight INT = (SELECT [e_fl_id_FK] FROM inserted);
	DECLARE @EventCount INT;
	SET @EventCount = (SELECT COUNT (*)
	FROM [dbo].[Event]
	WHERE [e_fl_id_FK] = @idFlight AND [e_eventType] = N'Вилетів');
	IF (@EventCount > 1)
	BEGIN
		RAISERROR (N'Літак не може вилетіти 2 рази підряд. Така подія вже існує.', 5, 1);
		ROLLBACK TRAN;
	END
GO
PRINT N'Creating [dbo].[StartIsEarlierThanArrive]...';


GO
--Триггер, перевіряючий, що подія "вилетів" раніше, ніж "прибув"
--DROP TRIGGER [StartIsEarlierThanArrive]
CREATE TRIGGER [StartIsEarlierThanArrive]
ON [dbo].[Event]
AFTER INSERT, UPDATE
AS
	DECLARE @DateTimeStart DATETIME;
	DECLARE @DateTimeArrive DATETIME;
	DECLARE @FlightID INT = (SELECT [e_fl_id_FK] FROM inserted)
	DECLARE @Count INT = (SELECT COUNT (*) FROM [dbo].[Event] WHERE [e_fl_id_FK] = @FlightID AND [e_eventType] = N'Вилетів');
	IF (@Count = 1)
	BEGIN
		SET @DateTimeStart = (SELECT [e_dateTimeEvent] FROM [dbo].[Event] WHERE [e_fl_id_FK] = @FlightID AND [e_eventType] = N'Вилетів')
		SET @DateTimeArrive = (SELECT [e_dateTimeEvent] FROM inserted);
		IF (@DateTimeStart > @DateTimeArrive)
		BEGIN
			RAISERROR (N'Літак не може прибути раніше, ніж вилетів. Перевірте коректність заповнених даних чи відредагуйте подію виліту', 5, 2);
			ROLLBACK TRAN;
		END
	END
GO
PRINT N'Creating [dbo].[StatusStart]...';


GO
--Триггер на автоматичне формування статуса рейсу "вилетів"
CREATE TRIGGER [StatusStart]
ON [dbo].[Event]
FOR INSERT, UPDATE
AS
	DECLARE @idFlight INT;
	SET @idFlight = (SELECT [e_fl_id_FK] FROM inserted);
	DECLARE @EventType NVARCHAR (50) = (SELECT [e_eventType] FROM inserted);
	DECLARE @Arrived INT = (SELECT COUNT (*) FROM [dbo].[Event] WHERE [e_fl_id_FK] = @idFlight AND [e_eventType] = N'Прибув')
	IF (@EventType = N'Вилетів' AND @Arrived = 0)
	BEGIN
		UPDATE [dbo].[Flight]
		SET [fl_status] = N'Вилетів'
		WHERE [fl_id] = @idFlight
	END
GO
PRINT N'Creating [dbo].[AutoAddPeriodicalFlights]...';


GO
--Додавання періодичних рейсів

--Додавання записів про періодичний рейс за допомогою циклу while
CREATE TRIGGER [AutoAddPeriodicalFlights]
ON [dbo].[Flight]
AFTER INSERT
AS
	DECLARE @Count INT = 0;
	DECLARE @GlobalCount INT = (SELECT [fl_numOfFlights] FROM inserted);
	SET @Count = (SELECT [fl_numOfFlights] FROM inserted);
	DECLARE @DateTimeStartGlobal DATETIME = (SELECT [fl_dateTimeStart] FROM inserted);
	
	UPDATE [dbo].[Flight]
	SET [fl_status] = N'По расписанию'
	WHERE [fl_id] = (SELECT [fl_id] FROM inserted)
	
	DECLARE @id INT;
		DECLARE @idAirCompany INT;
		DECLARE @idPlane INT;
		DECLARE @idAirPort INT;
		DECLARE @FlightType NVARCHAR (20);
		DECLARE @DateTimeStart DATETIME;
		DECLARE @Duration DATETIME;
		DECLARE @Periodicity DATETIME;
		DECLARE @PriceEconom INT;
		DECLARE @PriceBusiness INT;
		DECLARE @PriceFirst INT;

		SET @idAirCompany = (SELECT [fl_airc_id_FK] FROM inserted);
		SET @idAirPort = (SELECT [fl_airP_id_FK] FROM inserted);
		SET @idPlane = (SELECT [fl_pln_id_FK] FROM inserted);
		SET @FlightType = (SELECT [fl_type] FROM inserted);
		SET @Periodicity = (SELECT [fl_periodicity] FROM inserted);
		SET @DateTimeStart = (SELECT [fl_dateTimeStart] FROM inserted)
		
		SET @Duration = (SELECT [fl_duration] FROM inserted);
		SET @PriceEconom = (SELECT [fl_priceEconom] FROM inserted);
		SET @PriceBusiness = (SELECT [fl_priceBusiness] FROM inserted);
		SET @PriceFirst = (SELECT [fl_priceFirst] FROM inserted);
	
	WHILE (@Count > 1)
	BEGIN
		SET @id = (SELECT TOP (1) [fl_id]  FROM [dbo].[Flight] ORDER BY [fl_id] DESC) + 1;
		SET @DateTimeStart = @DateTimeStart + @Periodicity;
		SET @Count = @Count - 1;
		
		INSERT INTO [dbo].[Flight] 
		([fl_airc_id_FK],[fl_pln_id_FK], [fl_airP_id_FK], [fl_type], [fl_dateTimeStart], [fl_duration],
			[fl_numOfFlights], [fl_periodicity], [fl_priceEconom], [fl_priceBusiness], [fl_priceFirst], [fl_status])
		VALUES
		(@idAirCompany, @idPlane, @idAirPort, @FlightType, @DateTimeStart, @Duration, @Count, @Periodicity, @PriceEconom, @PriceBusiness, @PriceFirst, N'За роскладом')
	END
GO
PRINT N'Creating [dbo].[AutoDateTimeArrival]...';


GO
--Триггер на автоматичне заповнення часу прибуття і місцевого часу.
CREATE TRIGGER [AutoDateTimeArrival]
ON [dbo].[Flight]
AFTER INSERT, UPDATE
AS
	UPDATE [dbo].[Flight]
	SET [fl_dateTimeArrival] = [Flight].[fl_dateTimeStart] + [Flight].[fl_duration]
	FROM inserted
	DECLARE @GMT DATETIME = (
		SELECT DISTINCT [city_GMT]
		FROM [dbo].[City] c
			INNER JOIN 
				[AirPort] a
		ON 
			c.[city_id] = a.[airP_city_id_FK] AND a.[airP_id] = (SELECT DISTINCT [fl_airP_id_FK] FROM inserted)
	)
	
	DECLARE @GMTSign NVARCHAR(1) = (
		SELECT DISTINCT [city_signGMT] 
		FROM [dbo].[City] c
			INNER JOIN 
				[AirPort] a
		ON 
			c.[city_id] = a.[airP_city_id_FK] AND a.[airP_id] = (SELECT DISTINCT [airP_id] FROM inserted)
	)
	
	DECLARE @MyGMT DATETIME = (
		SELECT [city_GMT] FROM [dbo].[City] WHERE [city_id] = 1
	)
	
	DECLARE @FlightType NVARCHAR (20) = (
	SELECT DISTINCT [fl_type] FROM inserted
	)
	
	IF (@GMTSign = '+' AND @FlightType = 'Вхідний')
	BEGIN
		UPDATE [dbo].[Flight]
		SET [fl_dateTimeStartGMT] = [Flight].[fl_dateTimeStart] + @GMT - @MyGMT
		FROM inserted
		
		UPDATE [dbo].[Flight]
		SET [fl_dateTimeArrivalGMT] = [Flight].[fl_dateTimeArrival]
		FROM inserted
	END
	
	IF (@GMTSign = '-' AND @FlightType = 'Вхідний')
	BEGIN
		UPDATE [dbo].[Flight]
		SET [fl_dateTimeStartGMT] = [Flight].[fl_dateTimeStart] - @GMT - @MyGMT
		FROM inserted
		
		UPDATE [dbo].[Flight]
		SET [fl_dateTimeArrivalGMT] = [Flight].[fl_dateTimeArrival] + @GMT - @MyGMT
		FROM inserted
	END
	
	IF (@GMTSign = '+' AND @FlightType = 'Вихідний')
	BEGIN
		UPDATE [dbo].[Flight]
		SET [fl_dateTimeArrivalGMT] = [Flight].[fl_dateTimeArrival] + @GMT - @MyGMT
		FROM inserted
		
		UPDATE [dbo].[Flight]
		SET [fl_dateTimeStartGMT] = [Flight].[fl_dateTimeStart]
		FROM inserted
	END
	
	IF (@GMTSign = '-' AND @FlightType = 'Вихідний')
	BEGIN
		UPDATE [dbo].[Flight]
		SET [fl_dateTimeArrivalGMT] = [Flight].[fl_dateTimeArrival] - @GMT - @MyGMT
		FROM inserted
		
		UPDATE [dbo].[Flight]
		SET [fl_dateTimeStartGMT] = [Flight].[fl_dateTimeStart]
		FROM inserted
	END
GO
PRINT N'Creating [dbo].[DocNumberMatchesToRE]...';


GO
--Триггер, що перевіряє, що заповнене поле "номер документа", що посвідчує особу пасажира, відповідає регулярному виразу
CREATE TRIGGER [DocNumberMatchesToRE]
ON [dbo].[Passenger]
AFTER INSERT, UPDATE
AS
	DECLARE @Doc INT = (SELECT [pass_dT_id_FK] FROM inserted);
	DECLARE @RE NVARCHAR (100) = (SELECT [dT_regularExpression] FROM [dbo].[DocType] WHERE [dT_id] = @Doc);
	DECLARE @DocNum NVARCHAR (20) = (SELECT [pass_docNumber] FROM inserted);
	IF (@DocNum NOT LIKE @RE)
	BEGIN
		RAISERROR (N'Невірно введено номер документа.', 5, 6);
		ROLLBACK TRAN;
	END
GO
PRINT N'Creating [dbo].[DelayedOrCalcelled]...';


GO
--Триггер, що формує статус "Затримується" або "Скасовано"
CREATE TRIGGER [DelayedOrCalcelled]
ON [dbo].[UnexpectedEvent]
AFTER INSERT, UPDATE
AS
	DECLARE @idFlight INT = (
	SELECT [uE_fl_id_FK] 
	FROM 
	inserted);
	UPDATE [Flight]
	SET [fl_status] = (SELECT [uE_eventType] FROM inserted)
	WHERE [fl_id] = @idFlight;
GO
PRINT N'Creating [dbo].[NoDelayOrCancellIfStarted]...';


GO
--Триггер, що забороняє створювати подію "Затримується" або "Скасовано", якщо літак вже вилетів
CREATE TRIGGER [NoDelayOrCancellIfStarted]
ON [dbo].[UnexpectedEvent]
AFTER INSERT, UPDATE
AS
	DECLARE @CountStartEvents INT;
	DECLARE @idFlight INT = (SELECT [uE_fl_id_FK] FROM inserted);
	SET @CountStartEvents = (
	SELECT COUNT (*) 
	FROM [dbo].[Event] 
	WHERE [e_fl_id_FK] = @idFlight AND [e_eventType] = N'Вилетів');
	IF (@CountStartEvents = 1)
	BEGIN
		RAISERROR (N'Літак вже вилетів, рейс не може бути затриманий або скасований.', 5, 1)
		ROLLBACK TRAN;
	END
GO
PRINT N'Creating [dbo].[allCityCountry]...';


GO
--Представлення, що показує міста і країни
CREATE VIEW [allCityCountry]
AS
SELECT 
	S.[city_name] AS [Місто],
	[city_population] AS [Населення],
	[city_signGMT] AS [Зн],
	CONVERT (NVARCHAR, [city_GMT], 8) AS [GMT],
	C.[cntr_name] AS [Країна]
FROM [dbo].[City] S
INNER JOIN [dbo].Country C
ON C.[cntr_id] = S.[city_cntr_id_FK]
GO
PRINT N'Creating [dbo].[Buy]...';


GO
--Авіакомпанії з літаками


--Виведення інформації про покупців:
CREATE VIEW [Buy]
AS
SELECT
	B.[br_lastName] AS [Прізвище],
	B.[br_firstName] AS [Ім'я],
	B.[br_phone] AS [Телефон],
	B.[br_altPhone] AS [Альт. тел.],
	B.[br_timeToConnect] AS [Час д/зв'язку],
	B.[br_deliveryAdress] AS [Адреса доставки],
	[CountOfTickets] = (
	
	SELECT 
		COUNT ([tkt_id])
	FROM [dbo].[Ticket] 
	WHERE [br_id] = B.[br_id] 
	
	),
	[Стоимость] = (
	
	SELECT 
		SUM (CASE
			WHEN T.[tkt_class] = N'Економ' THEN F.[fl_priceEconom] 
			WHEN T.[tkt_class] = N'Бізнес' THEN F.[fl_priceBusiness] 
			WHEN T.[tkt_class] = N'Перший' THEN F.[fl_priceFirst]
			END
			)
	FROM [dbo].[Flight] F
	INNER JOIN
		[dbo].[Ticket] T
	ON
		F.[fl_id] = T.[tkt_fl_id_FK] 
	INNER JOIN
		[dbo].[Buyer] Bu
	ON
		T.[tkt_br_id_FK] = Bu.[br_id] 
	WHERE Bu.[br_id] = B.[br_id]
	
	),
	
	[К оплате] = (
	
	SELECT 
		SUM (CASE
			WHEN T.[tkt_class] = N'Економ' THEN F.[fl_priceEconom] 
			WHEN T.[tkt_class] = N'Бізнес' THEN F.[fl_priceBusiness] 
			WHEN T.[tkt_class] = N'Перший' THEN F.[fl_priceFirst]
			END
			)
	FROM [dbo].[Flight] F
	INNER JOIN
		[dbo].[Ticket] T
	ON
		F.[fl_id] = T.[tkt_fl_id_FK] 
	INNER JOIN
		[dbo].[Buyer] Bu
	ON
		T.[tkt_br_id_FK] = Bu.[br_id] 
	WHERE Bu.[br_id] = B.[br_id]
	
	) * (1 + Pay.[pay_addCost] )
FROM [dbo].[Buyer] B
	INNER JOIN
		[dbo].[Payment] Pay
	ON
		B.[br_pay_id_FK] = Pay.[pay_id]
GO
PRINT N'Creating [dbo].[FlightsAndEvents]...';


GO
--Виведення інормації про події, пов'язаних з літаком на рейсі
CREATE VIEW [FlightsAndEvents]
AS
SELECT 
	F.[fl_id] AS [ID],
	AC.[airc_name] AS [Авіакомпанія],
	C.[city_name] AS [Місто],
	AP.[airP_name] AS [Аеропорт],
	F.[fl_type] AS [Тип рейсу],
	P.[pln_model] AS [Літак],
	P.[pln_number] AS [Бортовий номер],
	CONVERT (NVARCHAR, F.[fl_dateTimeStart], 13) AS [Виліт],
	CONVERT (NVARCHAR, ES.[e_dateTimeEvent], 13) AS [Вилетів],
	CONVERT (NVARCHAR, EA.[e_dateTimeEvent], 13) AS [Прибув],
	CONVERT (NVARCHAR, [fl_dateTimeArrival], 13) AS [Прибутя],
	[Вид рейса] = (
	CASE
		WHEN [city_cntr_id_FK] = 1 THEN N'Внутрішній'
		ELSE N'Міжнародний'
	END
	),
	[fl_status] AS [Статус]
FROM [dbo].[Flight] F
	INNER JOIN 
		[dbo].[Aircompany] AC
	ON 
		F.[fl_airc_id_FK] = AC.[airc_id]
	INNER JOIN
		[dbo].[AirPort] AP
	ON 
		F.[fl_airP_id_FK] = AP.[airP_id] 
	INNER JOIN
		[dbo].[City] C
	ON
		AP.[airP_city_id_FK] = C.[city_id]
	LEFT OUTER JOIN 
		[dbo].[Event] ES
	ON 
		F.[fl_id] = ES.[e_fl_id_FK] AND ES.[e_eventType] = N'Вилетів' 
	LEFT OUTER JOIN
		[dbo].[Event] EA
	ON
		F.[fl_id] = EA.[e_fl_id_FK] AND EA.[e_eventType] = N'Прибув'
	INNER JOIN 
		[dbo].[Plane] P
	ON 
		F.[fl_pln_id_FK] = P.[pln_id]
GO
PRINT N'Creating [dbo].[UnexpEv]...';


GO
--Виведення непередбачуваних подій, пов'язаних з літаком
CREATE VIEW [UnexpEv]
AS
SELECT
	F.[fl_id] AS [ID],
	AC.[airc_name] AS [Авіакомпанія],
	P.[pln_model] AS [Літак],
	P.[pln_number] AS [Бортовий номер],
	C.[city_name] AS [Місто],
	AP.[airP_name] AS [Аеропорт],
	CONVERT (NVARCHAR, F.[fl_dateTimeStart], 13) AS [Виліт],
	CONVERT (NVARCHAR, F.[fl_dateTimeArrival], 13) AS [Прибутя],
	[uE_eventType] AS [Подія],
	F.[fl_status] AS [Статус],
	CONVERT (NVARCHAR, UE.[uE_dateTimeEvent], 13) AS [Час події],
	CONVERT (NVARCHAR, UE.[uE_Duration], 13) AS [Тривалість],
	UE.[ue_reason] AS [Причина]
FROM [dbo].[Flight] F
	INNER JOIN
		[dbo].[Aircompany] AC
	ON
		F.[fl_airc_id_FK] = AC.[airc_id] 
	INNER JOIN
		[dbo].[AirPort] AP
	ON 
		F.[fl_airP_id_FK] = AP.[airP_id] 
	INNER JOIN 
		[dbo].[City] C
	ON
		AP.[airP_city_id_FK] = C.[city_id] 
	INNER JOIN 
		[dbo].[Plane] P
	ON
		F.[fl_pln_id_FK] = P.[pln_id] 
	INNER JOIN
		[dbo].[UnexpectedEvent] UE
	ON
		F.[fl_id] = UE.[uE_fl_id_FK] 
GROUP BY
	AC.[airc_name], P.[pln_id], UE.[uE_dateTimeEvent], F.[fl_id], P.[pln_model], P.[pln_number],
	C.[city_name], AP.[airP_name], F.[fl_type], F.[fl_dateTimeStart], F.[fl_dateTimeArrival], UE.[uE_eventType],
	F.[fl_status], UE.[uE_dateTimeEvent], UE.[uE_Duration], UE.[ue_reason]
GO
PRINT N'Creating [dbo].[AircompanyDelete]...';


GO
CREATE PROC [AircompanyDelete]
	@AirсompanyID int
AS
DELETE FROM [dbo].[Aircompany] WHERE [airc_id] = @AirсompanyID;
GO
PRINT N'Creating [dbo].[AircompanySelect]...';


GO
--Збережувані процедури для інтерфейсу
CREATE PROCEDURE [AircompanySelect]
AS
SELECT [airc_id], [airc_name], [airc_phone], [airc_adress]
FROM [dbo].[Aircompany]
GO
PRINT N'Creating [dbo].[AircompanyUpdate]...';


GO
CREATE PROC [AircompanyUpdate]
	@AirсompanyName NVARCHAR (50),
	@AirсompanyPhone NVARCHAR (20),
	@AirсompanyAddress NVARCHAR (100),
	@AirсompanyID int
AS
UPDATE [dbo].[Aircompany]
	SET [airc_name] = @AirсompanyName
	, [airc_phone] = @AirсompanyPhone
	, [airc_adress] = @AirсompanyAddress
	WHERE [airc_id] = @AirсompanyID;
GO
PRINT N'Creating [dbo].[AircompWithPlanes]...';


GO
--Виведення інформації про Авіакомпанії і літаків, що їм належать
CREATE PROCEDURE [AircompWithPlanes]
AS

SELECT
	AC.[airc_name] AS [Авіакомпанія],
	P.[pln_model] AS [Літак],
	P.[pln_number] AS [Бортовий номер]
FROM [dbo].[Aircompany] AC
	INNER JOIN
	[dbo].[Plane] P
	ON 
		AC.[airc_id] = P.[pln_airc_id_FK]
GROUP BY
		AC.[airc_name] ,
		P.[pln_model] ,
		P.[pln_number];

SELECT
	[airc_name] AS [Авіакомпанія],
	[airc_phone] AS [Телефон],
	[airc_adress] AS [Адреса офісу]
FROM [dbo].[Aircompany]
GO
PRINT N'Creating [dbo].[AirсompanyInsert]...';


GO
CREATE PROC [AirсompanyInsert]
	@AirсompanyName NVARCHAR (50),
	@AirсompanyPhone NVARCHAR (20),
	@AirсompanyAddress NVARCHAR (100)
AS
INSERT INTO [dbo].[Aircompany]
	([airc_name], [airc_phone], [airc_adress])
VALUES
	(@AirсompanyName, @AirсompanyPhone, @AirсompanyAddress);
GO
PRINT N'Creating [dbo].[AllCity]...';


GO
--Показує всі міста і інформацію про них
CREATE PROCEDURE [AllCity]
AS

SELECT
	S.[city_name] AS [Місто],
	[city_population] AS [Населення],
	[city_signGMT] AS [Зн],
	CONVERT (NVARCHAR, [city_GMT], 8) AS [GMT],
	C.[cntr_name] AS [Країна]
FROM [dbo].[City] S
	INNER JOIN [dbo].Country C
	ON C.[cntr_id] = S.[city_cntr_id_FK]
ORDER BY S.[city_cntr_id_FK]
GO
PRINT N'Creating [dbo].[Buyers]...';


GO
--Виведення інформації про покупців
CREATE PROCEDURE [Buyers]

AS

SELECT
	B.[br_lastName] AS [Фамилия],
	B.[br_firstName] AS [Имя],
	B.[br_phone] AS [Телефон],
	B.[br_altPhone] AS [Альт. тел.],
	B.[br_timeToConnect] AS [Время д/связи],
	B.[br_deliveryAdress] AS [Адрес доставки],
	[CountOfTickets] = (
	
	SELECT
		COUNT ([tkt_id])
	FROM [dbo].[Ticket]
	WHERE [br_id] = B.[br_id] 
	
	),
	[Вартість] = (
	
	SELECT
		SUM (CASE
			WHEN T.[tkt_class] = N'Економ' THEN F.[fl_priceEconom] 
			WHEN T.[tkt_class] = N'Бізнес' THEN F.[fl_priceBusiness] 
			WHEN T.[tkt_class] = N'Перший' THEN F.[fl_priceFirst]
			END
			)
	FROM [dbo].[Flight] F
		INNER JOIN
		[dbo].[Ticket] T
		ON
		F.[fl_id] = T.[tkt_fl_id_FK]
		INNER JOIN
		[dbo].[Buyer] Bu
		ON
		T.[tkt_br_id_FK] = Bu.[br_id]
	WHERE Bu.[br_id] = B.[br_id]
	
	),

	[К оплате] = (
	
	SELECT
		SUM (CASE
			WHEN T.[tkt_class] = N'Економ' THEN F.[fl_priceEconom] 
			WHEN T.[tkt_class] = N'Бізнес' THEN F.[fl_priceBusiness] 
			WHEN T.[tkt_class] = N'Перший' THEN F.[fl_priceFirst]
			END
			)
	FROM [dbo].[Flight] F
		INNER JOIN
		[dbo].[Ticket] T
		ON
		F.[fl_id] = T.[tkt_fl_id_FK]
		INNER JOIN
		[dbo].[Buyer] Bu
		ON
		T.[tkt_br_id_FK] = Bu.[br_id]
	WHERE Bu.[br_id] = B.[br_id]
	
	) * (1 + Pay.[pay_addCost] )
FROM [dbo].[Buyer] B
	INNER JOIN
	[dbo].[Payment] Pay
	ON
		B.[br_pay_id_FK] = Pay.[pay_id]
GO
PRINT N'Creating [dbo].[CityDelete]...';


GO
CREATE PROC [CityDelete]
	@CityID INT
AS
DELETE FROM [dbo].[City] WHERE [city_id] = @CityID;
GO
PRINT N'Creating [dbo].[CityInsert]...';


GO
CREATE PROC [CityInsert]
	@CityCountryID INT,
	@CityName NVARCHAR (50),
	@CityPopulation BIGINT,
	@CityGMT DATETIME,
	@CitySignGMT NVARCHAR (1)
AS
DECLARE @ID INT;
SELECT TOP (1)
	@ID = [city_id]
FROM [dbo].[City]
ORDER BY [city_id] DESC;
INSERT INTO [dbo].[City]
	([city_id]
	,[city_cntr_id_FK]
	,[city_name]
	,[city_population]
	,[city_GMT]
	,[city_signGMT] )
VALUES
	(@ID+1
	, @CityCountryID
	, @CityName
	, @CityPopulation
	, @CityGMT
	, @CitySignGMT);
GO
PRINT N'Creating [dbo].[CityUpdate]...';


GO
CREATE PROC [CityUpdate]
	@CityID INT,
	@CityCountryID INT,
	@CityName NVARCHAR (50),
	@CityPopulation BIGINT,
	@CityGMT DATETIME,
	@CitySignGMT NVARCHAR (1)
AS
UPDATE [dbo].[City]  SET [city_cntr_id_FK] = @CityCountryID
	,[city_name] = @CityName
	,[city_population] = @CityPopulation
	,[city_GMT] = @CityGMT
	,[city_signGMT] = @CitySignGMT
	WHERE [city_id] = @CityID;
GO
PRINT N'Creating [dbo].[CountriesSelect]...';


GO
CREATE PROC [CountriesSelect]
AS
SELECT [cntr_id], [cntr_name]
FROM [dbo].[Country];
GO
PRINT N'Creating [dbo].[CountryDelete]...';


GO
CREATE PROC [CountryDelete]
	@CountryID INT
AS
DELETE FROM [dbo].[Country] 
	WHERE [cntr_id] = @CountryID;
GO
PRINT N'Creating [dbo].[CountryInsert]...';


GO
--exec [AirCompanySelect] ;



CREATE PROC [CountryInsert]
	@CountryName NVARCHAR (50)
AS
INSERT INTO [dbo].[Country]
	([cntr_name] )
VALUES
	(@CountryName);
GO
PRINT N'Creating [dbo].[CountryUpdate]...';


GO
CREATE PROC [CountryUpdate]
	@CountryName NVARCHAR (50),
	@CountryID INT
AS
UPDATE [dbo].[Country] 
	SET [cntr_name] = @CountryName
	WHERE [cntr_id] = @CountryID;
GO
PRINT N'Creating [dbo].[CountTickets]...';


GO
--Підрахунок кількості квитків, придбаних покупцем
CREATE PROCEDURE [CountTickets]
	@idBuyer INT
AS
SELECT
	COUNT ([tkt_id])
FROM [dbo].[Ticket]
WHERE
		[tkt_br_id_FK] = @idBuyer;
GO
PRINT N'Creating [dbo].[DeleteAirPort]...';


GO
--Видалення аеропорту
CREATE PROC [DeleteAirPort]
	@AirPortID INT
AS
DELETE FROM [AirPort] 
	WHERE [AirPort].[airP_id] = @AirPortID;
GO
PRINT N'Creating [dbo].[DeleteFlight]...';


GO
--Видалення даних про рейс
CREATE PROC [DeleteFlight]
	@FlightID INT
AS
BEGIN TRANSACTION;
DELETE FROM [dbo].[Flight]
		WHERE [dbo].[Flight].[fl_id] = @FlightID;
COMMIT;
GO
PRINT N'Creating [dbo].[DeletePlane]...';


GO
--Видалення інформації про літак
CREATE PROC [DeletePlane]
	@PlaneID INT
AS
DELETE FROM [dbo].[Plane] 
	WHERE [dbo].[Plane].[pln_id] = @PlaneID;
GO
PRINT N'Creating [dbo].[FlightsByCity]...';


GO
--Виведення даних про рейс по місту
CREATE PROCEDURE [FlightsByCity]
	@City NVARCHAR (50)
AS

SELECT
	AC.[airc_name] AS [Авіакомпанія],
	C.[city_name] AS [Місто],
	AP.[airP_name] AS [Аеропорт],
	CONVERT (NVARCHAR, F.[fl_dateTimeStartGMT], 13) AS [Виліт],
	CONVERT (NVARCHAR, F.[fl_dateTimeArrivalGMT], 13) AS [Прибуття],
	[fl_type] AS [Тип рейсу],
	[Вид рейсу] = (
	CASE
		WHEN C.[city_cntr_id_FK] = 1 THEN N'Внутрішній'
		ELSE N'Міжнародний'
	END
	),
	[fl_status] AS [Статус]
FROM [dbo].[Flight] F
	INNER JOIN
	[dbo].[Aircompany] AC
	ON
		AC.[airc_id] = F.[fl_airc_id_FK]
	INNER JOIN
	[dbo].[AirPort] AP
	ON
		AP.[airP_id] = F.[fl_airP_id_FK]
	INNER JOIN
	[dbo].[City] C
	ON		
		AP.[airP_city_id_FK] = C.[city_id]
GROUP BY
	C.[city_cntr_id_FK], F.[fl_type], F.[fl_dateTimeStartGMT], F.[fl_dateTimeArrivalGMT],
	C.[city_name], AC.[airc_name], AP.[airP_name], F.[fl_status]
HAVING 
	C.[city_name]  = @City
GO
PRINT N'Creating [dbo].[FlightsByCountry]...';


GO
--Виведення інформації про рейси по країні
CREATE PROCEDURE [FlightsByCountry]
	@Country NVARCHAR (50)
AS

SELECT
	CO.[cntr_name] AS [Країна],
	AC.[airc_name] AS [Авіакомпанія],
	C.[city_name] AS [Місто],
	AP.[airP_name] AS [Аеропорт],
	CONVERT (NVARCHAR, F.[fl_dateTimeStartGMT], 13) AS [Виліт],
	CONVERT (NVARCHAR, F.[fl_dateTimeArrivalGMT], 13) AS [Прибуття],
	[fl_type] AS [Тип рейсу],
	[Вид рейсу] = (
	CASE
		WHEN C.[city_cntr_id_FK] = 1 THEN N'Внутрішній'
		ELSE N'Міжнародний'
	END
	),
	[fl_status] AS [Статус]
FROM [dbo].[Flight] F
	INNER JOIN
	[dbo].[Aircompany] AC
	ON
		AC.[airc_id] = F.[fl_airc_id_FK]
	INNER JOIN
	[dbo].[AirPort] AP
	ON
		AP.[airP_id] = F.[fl_airP_id_FK]
	INNER JOIN
	[dbo].[City] C
	ON		
		AP.[airP_city_id_FK] = C.[city_id]
	INNER JOIN
	[dbo].[Country] CO
	ON
		C.[city_cntr_id_FK] = CO.[cntr_id]
GROUP BY
	CO.[cntr_name], C.[city_cntr_id_FK], F.[fl_type], F.[fl_dateTimeStartGMT], F.[fl_dateTimeArrivalGMT],
	C.[city_name], AC.[airc_name], AP.[airP_name], F.[fl_status]
HAVING 
	CO.[cntr_name]  = @Country
GO
PRINT N'Creating [dbo].[FlightsWithEvents]...';


GO
--Виведення інформації про події, пов'язані з літаком на рейсі
CREATE PROCEDURE [FlightsWithEvents]
AS

SELECT
	F.[fl_id] AS [ID],
	AC.[airc_name] AS [Авіакомпанія],
	C.[city_name] AS [Місто],
	AP.[airP_name] AS [Аеропорт],
	F.[fl_type] AS [Тип рейсу],
	P.[pln_model] AS [Літак],
	P.[pln_number] AS [Бортовий номер],
	CONVERT (NVARCHAR, F.[fl_dateTimeStart], 13) AS [Виліт],
	CONVERT (NVARCHAR, ES.[e_dateTimeEvent], 13) AS [Вилетів],
	CONVERT (NVARCHAR, EA.[e_dateTimeEvent], 13) AS [Прибув],
	CONVERT (NVARCHAR, [fl_dateTimeArrival], 13) AS [Прибуття],
	[Вид рейсу] = (
	CASE
		WHEN [city_cntr_id_FK] = 1 THEN N'Внутрішній'
		ELSE N'Міжнародний'
	END
	),
	[fl_status] AS [Статус]
FROM [dbo].[Flight] F
	INNER JOIN
	[dbo].[Aircompany] AC
	ON 
		F.[fl_airc_id_FK] = AC.[airc_id]
	INNER JOIN
	[dbo].[AirPort] AP
	ON 
		F.[fl_airP_id_FK] = AP.[airP_id]
	INNER JOIN
	[dbo].[City] C
	ON
		AP.[airP_city_id_FK] = C.[city_id]
	LEFT OUTER JOIN
	[dbo].[Event] ES
	ON 
		F.[fl_id] = ES.[e_fl_id_FK] AND ES.[e_eventType] = N'Вилетів'
	LEFT OUTER JOIN
	[dbo].[Event] EA
	ON
		F.[fl_id] = EA.[e_fl_id_FK] AND EA.[e_eventType] = N'Прибув'
	INNER JOIN
	[dbo].[Plane] P
	ON 
		F.[fl_pln_id_FK] = P.[pln_id]
GO
PRINT N'Creating [dbo].[FutureFlights]...';


GO
--Виведення інформації про найближчі рейси за певний період часу

--Змінна @FutureDate - це дата, яка обмежує проміжок часу, повинна бути пізніше теперішнього часу

CREATE PROCEDURE [FutureFlights]
	@FutureDate DATETIME
AS

SELECT
	AC.[airc_name] AS [Авіакомпанія],
	C.[city_name] AS [Місто],
	AP.[airP_name] AS [Аеропорт],
	--[DateTimeStartGMT] AS [Виліт] = 
	CONVERT (NVARCHAR, [fl_dateTimeStartGMT], 13) AS [Виліт],
	CONVERT (NVARCHAR, [fl_dateTimeArrivalGMT], 13) AS [Прибуття],
	[fl_type] AS [Тип рейсу],
	[fl_status] AS [Статус],
	[Вид рейсу] = (
	CASE
		WHEN C.[city_cntr_id_FK] = 1 THEN N'Внутрішній'
		ELSE N'Міжнародний'
	END
	)
FROM [dbo].[Flight] F
	INNER JOIN
	[dbo].[Aircompany] AC
	ON
		AC.[airc_id] = F.[fl_airc_id_FK]
	INNER JOIN
	[dbo].[AirPort] AP
	ON
		AP.[airP_id] = F.[fl_airP_id_FK]
	INNER JOIN
	[dbo].[City] C
	ON		
		AP.[airP_city_id_FK] = C.[city_id]
GROUP BY
	C.[city_cntr_id_FK], F.[fl_type], F.[fl_dateTimeStartGMT], F.[fl_dateTimeArrivalGMT],
	C.[city_name], AC.[airc_name], AP.[airP_name], F.[fl_status]
HAVING 
	F.[fl_dateTimeStartGMT] >= GETDATE () AND
	F.[fl_dateTimeArrivalGMT] <= @FutureDate
GO
PRINT N'Creating [dbo].[GetAirPort]...';


GO
--Аеропорт інформація за номером
CREATE PROC [GetAirPort]
	@AirPortID INT
AS
SELECT [airP_id], [airP_city_id_FK], [airP_name]
FROM [dbo].[AirPort]
WHERE [airP_id] = @AirPortID;
GO
PRINT N'Creating [dbo].[GetCity]...';


GO
CREATE PROC [GetCity]
	@CityID INT
AS
SELECT [city_id]
	, [city_cntr_id_FK]
	, [city_name] 
	, [city_population]
	, [city_GMT]
	, [city_signGMT]
FROM [dbo].[City]
WHERE [city_id] = @CityID;
GO
PRINT N'Creating [dbo].[GetCountry]...';


GO
CREATE PROC [GetCountry]
	@CountryID INT
AS
SELECT [cntr_id], [cntr_name]
FROM [dbo].[Country]
WHERE [cntr_id] = @CountryID;
GO
PRINT N'Creating [dbo].[GetFlight]...';


GO
--Отримання повної інформації про один рейс
CREATE PROC [GetFlight]
	@FlightID INT
AS
SELECT F.[fl_id]
		, F.[fl_airc_id_FK] 
		, F.[fl_pln_id_FK] 
		, F.[fl_airP_id_FK] 
		, F.[fl_type] 
		, F.[fl_dateTimeStart] 
		, CONVERT(NVARCHAR, F.[fl_duration], 108) AS [Duration]
		, F.[fl_dateTimeArrival] 
		, F.[fl_priceEconom] 
		, F.[fl_priceBusiness] 
		, F.[fl_priceFirst] 
		, F.[fl_dateTimeStartGMT] 
		, F.[fl_dateTimeArrivalGMT] 
		, F.[fl_status]
FROM [dbo].[Flight] F
WHERE F.[fl_id] = @FlightID;
GO
PRINT N'Creating [dbo].[GetPlaneInfo]...';


GO
--Отримання інформації про літак
CREATE PROC [GetPlaneInfo]
	@PlaneID INT
AS
SELECT [pln_id], [pln_airc_id_FK], [pln_model], [pln_number]
FROM [dbo].[Plane]
WHERE [pln_id] = @PlaneID;
GO
PRINT N'Creating [dbo].[InsertAirPort]...';


GO
--Вставка нового аеропорту
CREATE PROC [InsertAirPort]
	@AirPortName NVARCHAR (50),
	@AirPortCityID INT
AS
BEGIN TRANSACTION;
INSERT INTO [dbo].[AirPort]
	([airP_name], [airP_city_id_FK])
VALUES
	(
		@AirPortName, @AirPortCityID
		);
COMMIT;
GO
PRINT N'Creating [dbo].[InsertFlight]...';


GO
--Вставка рейсу
CREATE PROC [InsertFlight]
	@FlightAircompanyID INT,
	@FlightPlaneID INT,
	@FlightAirPortID INT,
	@FlightType NVARCHAR (20),
	@FlightDateTimeStart DATETIME,
	@FlightDuration DATETIME,
	@FlightNumOfFlights INT,
	@FlightPeriodicity DATETIME,
	@FlightPriceEconom MONEY,
	@FlightPriceBusiness MONEY,
	@FlightPriceFirst MONEY
AS
BEGIN TRANSACTION;
IF (@FlightDuration NOT BETWEEN '1900-01-01 00:00:00' AND '1900-02-01 00:00:00')
	BEGIN
	RAISERROR (N'Літак не може літати більше доби', 8, 10);
	ROLLBACK TRANSACTION;
END
IF (@FlightPeriodicity NOT BETWEEN '1900-01-01 00:00:00' AND '1900-30-01 00:00:00')
	BEGIN
	RAISERROR (N'Перводичні рейси не можуть бути рідше одного разу в місяць', 8, 11)
	ROLLBACK TRANSACTION;
END
IF (@FlightNumOfFlights < 1)
	BEGIN
	RAISERROR (N'При додавані запису повинно бути не менце одного рейсу', 8, 12);
	ROLLBACK TRANSACTION;
END
INSERT INTO [dbo].[Flight]
	([fl_airc_id_FK]
	,[fl_pln_id_FK]
	,[fl_airP_id_FK]
	,[fl_type]
	,[fl_dateTimeStart]
	,[fl_duration]
	,[fl_numOfFlights]
	,[fl_periodicity]
	,[fl_priceEconom]
	,[fl_priceBusiness]
	,[fl_priceFirst]
	)
VALUES
	(@FlightAircompanyID 
		, @FlightPlaneID 
		, @FlightAirPortID 
		, @FlightType 
		, @FlightDateTimeStart
		, @FlightDuration
		, @FlightNumOfFlights 
		, @FlightPeriodicity
		, @FlightPriceEconom
		, @FlightPriceBusiness
		, @FlightPriceFirst
	);
COMMIT;
GO
PRINT N'Creating [dbo].[InsertPlane]...';


GO
--Добавлення інформації про літак
CREATE PROC [InsertPlane]
	@PlaneAircompanyID INT,
	@PlaneModel NVARCHAR (20),
	@PlaneNumber NVARCHAR (50)
AS
INSERT INTO [dbo].[Plane]
	([pln_airc_id_FK]
	,[pln_model]
	,[pln_number]
	)
VALUES
	(@PlaneAircompanyID
		, @PlaneModel
		, @PlaneNumber
	)
GO
PRINT N'Creating [dbo].[Passeng]...';


GO
--Виведення інформації про білети, які купила визначна людина
CREATE PROCEDURE [Passeng]
@LastName NVARCHAR (50),
@FirstName NVARCHAR (50)
AS

SELECT
	P.[pass_lastName] AS [Прізвище],
	P.[pass_firstName] AS [Ім'я],
	CONVERT (NVARCHAR, P.[pass_birthDate], 13) AS [Дата народження],
	P.[pass_gender] AS [Стать],
	D.[dT_name] AS [Документ],
	P.[pass_docNumber] AS [Номер документа],
	B.[br_lastName] AS [Прізвище покупця],
	B.[br_firstName] AS [Ім'я покупця],
	AC.[airc_name] AS [Авіакомпанія],
	C.[city_name] AS [Місто],
	AP.[airP_name] AS [Аеропорт],
	Pl.[pln_model] AS [Борт],
	F.[fl_type] AS [Тип рейсу],
	F.[fl_dateTimeStartGMT] AS [Час вильоту],
	F.[fl_dateTimeArrival] AS [Час прибуття],
	[Цена] = (CASE
		WHEN T.[tkt_class] = N'Економ' THEN F.[fl_priceEconom] 
		WHEN T.[tkt_class] = N'Бізнес' THEN F.[fl_priceBusiness] 
		WHEN T.[tkt_class] = N'Перший' THEN F.[fl_priceFirst]
	END),
	[Стоимость] = (
	
	CASE
		WHEN T.[tkt_class] = N'Економ' THEN F.[fl_priceEconom] 
		WHEN T.[tkt_class] = N'Бізнес' THEN F.[fl_priceBusiness] 
		WHEN T.[tkt_class] = N'Перший' THEN F.[fl_priceFirst]
	END
	) * (1 + Pay.[pay_addCost] )
FROM [dbo].[Passenger] P
	INNER JOIN
		[dbo].[DocType] D
	ON 
		P.[pass_dT_id_FK] = D.[dT_id] 
	INNER JOIN
		[dbo].[Ticket] T
	ON
		P.[pass_id] = T.[tkt_pass_id_FK] 
	INNER JOIN
		[dbo].[Buyer] B
	ON
		T.[tkt_br_id_FK] = B.[br_id] 
	INNER JOIN 
		[dbo].[Flight] F
	ON
		T.[tkt_fl_id_FK] = F.[fl_id]
	INNER JOIN
		[dbo].[AirPort] AP
	ON
		F.[fl_airP_id_FK] = AP.[airP_id] 
	INNER JOIN
		[dbo].[City] C
	ON
		AP.[airP_city_id_FK] = C.[city_id] 
	INNER JOIN
		[dbo].[Aircompany] AC
	ON
		F.[fl_airc_id_FK] = AC.[airc_id] 
	INNER JOIN
		[dbo].[Plane] Pl
	ON
		F.[fl_pln_id_FK] = Pl.[pln_id] 
	INNER JOIN
		[dbo].[Payment] Pay
	ON
		B.[br_pay_id_FK] = Pay.[pay_id] 
WHERE 		
	B.[br_lastName] LIKE N'%'+@LastName+N'%' OR B.[br_lastName] LIKE N'%'+@FirstName+N'%'
ORDER BY
	B.[br_id], F.[fl_id]
GO
PRINT N'Creating [dbo].[PastFlights]...';


GO
--Звіт про переміщення літаків
CREATE PROCEDURE [PastFlights]
	@PastDate DATETIME
AS

SELECT
	AC.[airc_name] AS [Авіакомпанія],
	C.[city_name] AS [Місто],
	AP.[airP_name] AS [Аеропорт],
	--[DateTimeStartGMT] AS [Виліт] = 
	CONVERT (NVARCHAR, [fl_dateTimeStartGMT], 13) AS [Виліт],
	CONVERT (NVARCHAR, [fl_dateTimeArrivalGMT], 13) AS [Прибуття],
	[fl_type] AS [Тип рейсу],
	[fl_status] AS [Статус],
	[Вид рейсу] = (
	CASE
		WHEN C.[city_cntr_id_FK] = 1 THEN N'Внутрішній'
		ELSE N'Міжнародний'
	END
	)
FROM [dbo].[Flight] F
	INNER JOIN
	[dbo].[Aircompany] AC
	ON
		AC.[airc_id] = F.[fl_airc_id_FK]
	INNER JOIN
	[dbo].[AirPort] AP
	ON
		AP.[airP_id] = F.[fl_airP_id_FK]
	INNER JOIN
	[dbo].[City] C
	ON		
		AP.[airP_city_id_FK] = C.[city_id]
GROUP BY
	C.[city_cntr_id_FK], F.[fl_type], F.[fl_dateTimeStartGMT], F.[fl_dateTimeArrivalGMT],
	C.[city_name], AC.[airc_name], AP.[airP_name], F.[fl_status]
HAVING 
	F.[fl_dateTimeStartGMT] <= GETDATE () AND
	F.[fl_dateTimeArrivalGMT] >= @PastDate
GO
PRINT N'Creating [dbo].[RefCountriesSelect]...';


GO
--Список країн для фільтрів або зовнішнього ключа
CREATE PROC [RefCountriesSelect]
AS
SELECT [cntr_id], [cntr_name]
FROM [dbo].[Country] ;
GO
PRINT N'Creating [dbo].[RefSelectCitiesListByID]...';


GO
--Список Міст по ID країни (для зовнішнього ключа)
CREATE PROC [RefSelectCitiesListByID]
	@CountryID INT
AS
SELECT [city_id], [city_name]
FROM [dbo].[City]
WHERE [city_cntr_id_FK] = @CountryID;
GO
PRINT N'Creating [dbo].[SelectAirplaneList]...';


GO
--Список літаків
CREATE PROC [SelectAirplaneList]
AS
SELECT P.[pln_id], P.[pln_airc_id_FK], P.[pln_model], P.[pln_number], A.[airc_name]
FROM [dbo].[Plane] P
	INNER JOIN [dbo].[Aircompany] A
	ON	P.[pln_airc_id_FK] = A.[airc_id]
GO
PRINT N'Creating [dbo].[SelectAirPortList]...';


GO
--Аеропорти
CREATE PROC [SelectAirPortList]
AS
SELECT A.[airP_id] 
	, A.[airP_name] AS [AirPortName]
	, CI.[city_name] AS [CityName]
	, CO.[cntr_name] AS [CountryName]
FROM [dbo].[AirPort] A
	INNER JOIN [dbo].[City] CI
	ON A.[airP_city_id_FK] = CI.[city_id]
	INNER JOIN [dbo].[Country] CO
	ON CI.[city_cntr_id_FK] = CO.[cntr_id];
GO
PRINT N'Creating [dbo].[SelectCitiesList]...';


GO
--Місто
CREATE PROC [SelectCitiesList]
AS
SELECT CI.[city_id] 
	, CO.[cntr_name] AS [CountryName]
	, CI.[city_name] AS [CityName]
	, CI.[city_cntr_id_FK] AS [CountryID]	--Країни видалити
	, [city_GMT] AS [CityGMT]
	, [city_signGMT]
FROM [dbo].[City] CI
	INNER JOIN [dbo].[Country] CO
	ON CI.[city_cntr_id_FK] = CO.[cntr_id]
GO
PRINT N'Creating [dbo].[SelectFlights]...';


GO
--Список рейсів
CREATE PROC [SelectFlights]
	@BeginDate DATETIME = '1900-01-01 00:00:00',
	@EndDate DATETIME = '2050-01-01 00:00:00',
	@CountryID INT = 0,
	@CityID INT = 0,
	@AirPortID INT = 0
AS
SELECT F.[fl_id]
		, F.[fl_airc_id_FK] 
		, F.[fl_pln_id_FK] 
		, F.[fl_airP_id_FK] 
		, F.[fl_type] 
		, F.[fl_dateTimeStart] 
		, CONVERT(NVARCHAR, F.[fl_duration], 108) AS [Duration]
		, F.[fl_dateTimeArrival] 
		, F.[fl_priceEconom] 
		, F.[fl_priceBusiness] 
		, F.[fl_priceFirst] 
		, F.[fl_dateTimeStartGMT] 
		, F.[fl_dateTimeArrivalGMT] 
		, F.[fl_status] 
		, AC.[airc_name] 
		, P.[pln_model] 
		, AP.[airP_name] AS [AirPortName]
		, CI.[city_name] AS [CityName]
		, CO.[cntr_name] AS [CountryName]
FROM [dbo].[Flight] F
	INNER JOIN [dbo].[Aircompany] AC
	ON F.[fl_airc_id_FK] = AC.[airc_id]
	INNER JOIN [dbo].[Plane] P
	ON F.[fl_pln_id_FK] = P.[pln_id]
	INNER JOIN [dbo].[AirPort] AP
	ON F.[fl_airP_id_FK] = AP.[airP_id]
	INNER JOIN [dbo].[City] CI
	ON AP.[airP_city_id_FK] = CI.[city_id]
	INNER JOIN [dbo].[Country] CO
	ON CI.[city_cntr_id_FK] = CO.[cntr_id]
WHERE 
		(
			((F.[fl_dateTimeStart] BETWEEN @BeginDate AND @EndDate)
	AND F.[fl_type] = N'Вихідний')
	OR
	((F.[fl_dateTimeArrival] BETWEEN @BeginDate AND @EndDate)
	AND F.[fl_type] = N'Вхідний')
		)
	AND
	(
			(CO.[cntr_id] = @CountryID) OR (@CountryID = 0)
		)
	AND
	(
			(CI.[city_id] = @CityID) OR (@CityID = 0)
		)
	AND
	(
			(AP.[airP_id] = @AirPortID) OR (@AirPortID = 0)
		);
GO
PRINT N'Creating [dbo].[SelectRefAircompaniesList]...';


GO
--Список авіакомпаній для зовнішнього ключа
CREATE PROC [SelectRefAircompaniesList]
AS
SELECT [airc_id], [airc_name]
FROM [dbo].[Aircompany]
GO
PRINT N'Creating [dbo].[SelectRefAirPortListByCity]...';


GO
--Спиок аеропортів для зовнішнього ключа по місту
CREATE PROC [SelectRefAirPortListByCity]
	@AirPortCityID INT
AS
SELECT A.[airP_id] , A.[airP_name]
FROM [dbo].[AirPort] A
WHERE A.[airP_city_id_FK] = @AirPortCityID;
GO
PRINT N'Creating [dbo].[SelectRefPlaneList]...';


GO
CREATE PROC [SelectRefPlaneList]
AS
SELECT P.[pln_id]
		, P.[pln_model] + ' : ' + P.[pln_number] + ' (' + A.[airc_name] + ')' AS [PlaneName]
FROM [dbo].[Plane] P
	INNER JOIN [dbo].[Aircompany] A
	ON P.[pln_airc_id_FK] = A.[airc_id]
GO
PRINT N'Creating [dbo].[TotalCost]...';


GO
--Підрахунок загальної вартості куплених квитків
CREATE PROCEDURE [TotalCost]
	@idBuyer INT
AS
SELECT
	SUM (CASE
			WHEN T.[tkt_class] = N'Економ' THEN F.[fl_priceEconom] 
			WHEN T.[tkt_class] = N'Бізнес' THEN F.[fl_priceBusiness] 
			WHEN T.[tkt_class] = N'Перший' THEN F.[fl_priceFirst]
			END
			)
FROM [dbo].[Flight] F
	INNER JOIN
	[dbo].[Ticket] T
	ON
		F.[fl_id] = T.[tkt_fl_id_FK]
	INNER JOIN
	[dbo].[Buyer] B
	ON
		T.[tkt_br_id_FK] = B.[br_id]
WHERE B.[br_id] = @idBuyer
GO
PRINT N'Creating [dbo].[UEvents]...';


GO
--Виведення непередбачених подій, пов'язаних з літаком
CREATE PROCEDURE [UEvents]
AS

SELECT
	F.[fl_id] AS [ID],
	AC.[airc_name] AS [Авіакомпанія],
	P.[pln_model] AS [Літак],
	P.[pln_number] AS [Бортовий номер],
	C.[city_name] AS [Місто],
	AP.[airP_name] AS [Аеропорт],
	CONVERT (NVARCHAR, F.[fl_dateTimeStart], 13) AS [Виліт],
	CONVERT (NVARCHAR, F.[fl_dateTimeArrival], 13) AS [Прибутя],
	[uE_eventType] AS [Событие],
	F.[fl_status] AS [Статус],
	CONVERT (NVARCHAR, UE.[uE_dateTimeEvent], 13) AS [Час події],
	CONVERT (NVARCHAR, UE.[uE_Duration], 13) AS [Тривалість],
	UE.[ue_reason] AS [Причина]
FROM [dbo].[Flight] F
	INNER JOIN
	[dbo].[Aircompany] AC
	ON
		F.[fl_airc_id_FK] = AC.[airc_id]
	INNER JOIN
	[dbo].[AirPort] AP
	ON 
		F.[fl_airP_id_FK] = AP.[airP_id]
	INNER JOIN
	[dbo].[City] C
	ON
		AP.[airP_city_id_FK] = C.[city_id]
	INNER JOIN
	[dbo].[Plane] P
	ON
		F.[fl_pln_id_FK] = P.[pln_id]
	INNER JOIN
	[dbo].[UnexpectedEvent] UE
	ON
		F.[fl_id] = UE.[uE_fl_id_FK]
GROUP BY
	AC.[airc_name], P.[pln_id], UE.[uE_dateTimeEvent], F.[fl_id], P.[pln_model], P.[pln_number],
	C.[city_name], AP.[airP_name], F.[fl_type], F.[fl_dateTimeStart], F.[fl_dateTimeArrival], UE.[uE_eventType],
	F.[fl_status], UE.[uE_dateTimeEvent], UE.[uE_Duration], UE.[ue_reason]
GO
PRINT N'Creating [dbo].[UpdateAirPort]...';


GO
--Оновлення аеропорту
CREATE PROC [UpdateAirPort]
	@AirPortID INT,
	@AirPortName NVARCHAR (50),
	@AirPortCityID INT
AS
BEGIN TRANSACTION;
UPDATE [dbo].[AirPort] 
		SET
			[airP_name] = @AirPortName,
			[airP_city_id_FK] = @AirPortCityID
		WHERE
			[dbo].[AirPort].[airP_id] = @AirPortID;
COMMIT;
GO
PRINT N'Creating [dbo].[UpdateFlight]...';


GO
--Оновлення даних про рейс
CREATE PROC [UpdateFlight]
	@FlightID INT,
	@FlightAircompanyID INT,
	@FlightPlaneID INT,
	@FlightAirPortID INT,
	@FlightType NVARCHAR (20),
	@FlightDateTimeStart DATETIME,
	@FlightDuration DATETIME,
	@FlightPriceEconom MONEY,
	@FlightPriceBusiness MONEY,
	@FlightPriceFirst MONEY
AS
BEGIN TRANSACTION;
IF (@FlightDuration NOT BETWEEN '1900-01-01 00:00:00' AND '1900-02-01 00:00:00')
	BEGIN
	RAISERROR (N'Літак не може летіти більше доби', 8, 10);
	ROLLBACK TRANSACTION;
END
UPDATE [dbo].[Flight] 
		SET
			[fl_airc_id_FK] = @FlightAircompanyID,
			[fl_pln_id_FK] = @FlightPlaneID,
			[fl_airP_id_FK] = @FlightAirPortID,
			[fl_type] = @FlightType,
			[fl_dateTimeStart] = @FlightDateTimeStart,
			[fl_duration] = @FlightDuration,
			[fl_priceEconom] = @FlightPriceEconom,
			[fl_priceBusiness] = @FlightPriceBusiness,
			[fl_priceFirst] = @FlightPriceFirst 
		WHERE [dbo].[Flight].[fl_id] = @FlightID;
COMMIT;
GO
PRINT N'Creating [dbo].[UpdatePlane]...';


GO
--Оновлення інформації про літак
CREATE PROC [UpdatePlane]
	@PlaneID INT,
	@PlaneAircompanyID INT,
	@PlaneModel NVARCHAR (20),
	@PlaneNumber NVARCHAR (50)
AS
UPDATE [Plane] 
	SET
		[pln_airc_id_FK] = @PlaneAircompanyID,
		[pln_model] = @PlaneModel,
		[pln_number] = @PlaneNumber
	WHERE [Plane].[pln_id] = @PlaneID;
GO
PRINT N'Update complete.';


GO

/*
Deployment script for AirPortDB

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "AirPortDB"
:setvar DefaultFilePrefix "AirPortDB"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL14.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL14.MSSQLSERVER\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Dropping [dbo].[AirPort_City_FK]...';


GO
ALTER TABLE [dbo].[AirPort] DROP CONSTRAINT [AirPort_City_FK];


GO
PRINT N'Dropping [dbo].[Flight_AirPort_FK]...';


GO
ALTER TABLE [dbo].[Flight] DROP CONSTRAINT [Flight_AirPort_FK];


GO
PRINT N'Dropping [dbo].[Buyer_Payment_FK]...';


GO
ALTER TABLE [dbo].[Buyer] DROP CONSTRAINT [Buyer_Payment_FK];


GO
PRINT N'Dropping [dbo].[Ticket_Buyer_FK]...';


GO
ALTER TABLE [dbo].[Ticket] DROP CONSTRAINT [Ticket_Buyer_FK];


GO
PRINT N'Dropping [dbo].[City_Country_FK]...';


GO
ALTER TABLE [dbo].[City] DROP CONSTRAINT [City_Country_FK];


GO
PRINT N'Dropping [dbo].[Passenger_DocType_FK]...';


GO
ALTER TABLE [dbo].[Passenger] DROP CONSTRAINT [Passenger_DocType_FK];


GO
PRINT N'Dropping [dbo].[Event_Flight_FK]...';


GO
ALTER TABLE [dbo].[Event] DROP CONSTRAINT [Event_Flight_FK];


GO
PRINT N'Dropping [dbo].[Flight_Aircompany_FK]...';


GO
ALTER TABLE [dbo].[Flight] DROP CONSTRAINT [Flight_Aircompany_FK];


GO
PRINT N'Dropping [dbo].[Flight_Plane_FK]...';


GO
ALTER TABLE [dbo].[Flight] DROP CONSTRAINT [Flight_Plane_FK];


GO
PRINT N'Dropping [dbo].[Ticket_Flight_FK]...';


GO
ALTER TABLE [dbo].[Ticket] DROP CONSTRAINT [Ticket_Flight_FK];


GO
PRINT N'Dropping [dbo].[UnexpectedEvent_Flight_FK]...';


GO
ALTER TABLE [dbo].[UnexpectedEvent] DROP CONSTRAINT [UnexpectedEvent_Flight_FK];


GO
PRINT N'Dropping [dbo].[Ticket_Passenger_FK]...';


GO
ALTER TABLE [dbo].[Ticket] DROP CONSTRAINT [Ticket_Passenger_FK];


GO
PRINT N'Dropping [dbo].[Plane_Aircompany_FK]...';


GO
ALTER TABLE [dbo].[Plane] DROP CONSTRAINT [Plane_Aircompany_FK];


GO
PRINT N'Starting rebuilding table [dbo].[AirPort]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_AirPort] (
    [airP_id]         INT        IDENTITY (1, 1) NOT NULL,
    [airP_city_id_FK] INT        NOT NULL,
    [airP_name]       NCHAR (10) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_AirPort_PK1] PRIMARY KEY CLUSTERED ([airP_id] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[AirPort])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_AirPort] ON;
        INSERT INTO [dbo].[tmp_ms_xx_AirPort] ([airP_id], [airP_city_id_FK], [airP_name])
        SELECT   [airP_id],
                 [airP_city_id_FK],
                 [airP_name]
        FROM     [dbo].[AirPort]
        ORDER BY [airP_id] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_AirPort] OFF;
    END

DROP TABLE [dbo].[AirPort];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_AirPort]', N'AirPort';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_AirPort_PK1]', N'AirPort_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [dbo].[Buyer]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_Buyer] (
    [br_id]             INT            IDENTITY (1, 1) NOT NULL,
    [br_pay_id_FK]      INT            NOT NULL,
    [br_lastName]       NVARCHAR (50)  NOT NULL,
    [br_firstName]      NVARCHAR (50)  NOT NULL,
    [br_phone]          NVARCHAR (15)  NOT NULL,
    [br_altPhone]       NVARCHAR (15)  NOT NULL,
    [br_timeToConnect]  NVARCHAR (100) NOT NULL,
    [br_deliveryAdress] NVARCHAR (100) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_Buyer_PK1] PRIMARY KEY CLUSTERED ([br_id] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[Buyer])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Buyer] ON;
        INSERT INTO [dbo].[tmp_ms_xx_Buyer] ([br_id], [br_pay_id_FK], [br_lastName], [br_firstName], [br_phone], [br_altPhone], [br_timeToConnect], [br_deliveryAdress])
        SELECT   [br_id],
                 [br_pay_id_FK],
                 [br_lastName],
                 [br_firstName],
                 [br_phone],
                 [br_altPhone],
                 [br_timeToConnect],
                 [br_deliveryAdress]
        FROM     [dbo].[Buyer]
        ORDER BY [br_id] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Buyer] OFF;
    END

DROP TABLE [dbo].[Buyer];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_Buyer]', N'Buyer';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_Buyer_PK1]', N'Buyer_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [dbo].[City]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_City] (
    [city_id]         INT           IDENTITY (1, 1) NOT NULL,
    [city_cntr_id_FK] INT           NOT NULL,
    [city_name]       NVARCHAR (50) NOT NULL,
    [city_population] BIGINT        NULL,
    [city_GMT]        DATETIME      NOT NULL,
    [city_signGMT]    NVARCHAR (1)  NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_City_PK1] PRIMARY KEY CLUSTERED ([city_id] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[City])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_City] ON;
        INSERT INTO [dbo].[tmp_ms_xx_City] ([city_id], [city_cntr_id_FK], [city_name], [city_population], [city_GMT], [city_signGMT])
        SELECT   [city_id],
                 [city_cntr_id_FK],
                 [city_name],
                 [city_population],
                 [city_GMT],
                 [city_signGMT]
        FROM     [dbo].[City]
        ORDER BY [city_id] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_City] OFF;
    END

DROP TABLE [dbo].[City];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_City]', N'City';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_City_PK1]', N'City_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [dbo].[Country]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_Country] (
    [cntr_id]   INT           IDENTITY (1, 1) NOT NULL,
    [cntr_name] NVARCHAR (50) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_Country_PK1] PRIMARY KEY CLUSTERED ([cntr_id] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[Country])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Country] ON;
        INSERT INTO [dbo].[tmp_ms_xx_Country] ([cntr_id], [cntr_name])
        SELECT   [cntr_id],
                 [cntr_name]
        FROM     [dbo].[Country]
        ORDER BY [cntr_id] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Country] OFF;
    END

DROP TABLE [dbo].[Country];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_Country]', N'Country';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_Country_PK1]', N'Country_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [dbo].[DocType]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_DocType] (
    [dT_id]                INT            IDENTITY (1, 1) NOT NULL,
    [dT_name]              NVARCHAR (50)  NOT NULL,
    [dT_description]       NVARCHAR (50)  NOT NULL,
    [dT_regularExpression] NVARCHAR (100) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_DocType_PK1] PRIMARY KEY CLUSTERED ([dT_id] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[DocType])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_DocType] ON;
        INSERT INTO [dbo].[tmp_ms_xx_DocType] ([dT_id], [dT_name], [dT_description], [dT_regularExpression])
        SELECT   [dT_id],
                 [dT_name],
                 [dT_description],
                 [dT_regularExpression]
        FROM     [dbo].[DocType]
        ORDER BY [dT_id] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_DocType] OFF;
    END

DROP TABLE [dbo].[DocType];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_DocType]', N'DocType';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_DocType_PK1]', N'DocType_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [dbo].[Event]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_Event] (
    [e_id]            INT           IDENTITY (1, 1) NOT NULL,
    [e_fl_id_FK]      INT           NOT NULL,
    [e_eventType]     NVARCHAR (50) NOT NULL,
    [e_dateTimeEvent] DATETIME      NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_Event_PK1] PRIMARY KEY CLUSTERED ([e_id] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[Event])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Event] ON;
        INSERT INTO [dbo].[tmp_ms_xx_Event] ([e_id], [e_fl_id_FK], [e_eventType], [e_dateTimeEvent])
        SELECT   [e_id],
                 [e_fl_id_FK],
                 [e_eventType],
                 [e_dateTimeEvent]
        FROM     [dbo].[Event]
        ORDER BY [e_id] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Event] OFF;
    END

DROP TABLE [dbo].[Event];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_Event]', N'Event';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_Event_PK1]', N'Event_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [dbo].[Flight]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_Flight] (
    [fl_id]                 INT           IDENTITY (1, 1) NOT NULL,
    [fl_airc_id_FK]         INT           NOT NULL,
    [fl_pln_id_FK]          INT           NOT NULL,
    [fl_airP_id_FK]         INT           NOT NULL,
    [fl_type]               NVARCHAR (32) NOT NULL,
    [fl_dateTimeStart]      DATETIME      NOT NULL,
    [fl_duration]           DATETIME      NOT NULL,
    [fl_dateTimeArrival]    DATETIME      NOT NULL,
    [fl_numOfFlights]       INT           NOT NULL,
    [fl_periodicity]        DATETIME      NOT NULL,
    [fl_priceEconom]        MONEY         NOT NULL,
    [fl_priceBusiness]      MONEY         NOT NULL,
    [fl_priceFirst]         MONEY         NOT NULL,
    [fl_dateTimeStartGMT]   DATETIME      NOT NULL,
    [fl_dateTimeArrivalGMT] DATETIME      NOT NULL,
    [fl_status]             NVARCHAR (32) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_Flight_PK1] PRIMARY KEY CLUSTERED ([fl_id] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[Flight])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Flight] ON;
        INSERT INTO [dbo].[tmp_ms_xx_Flight] ([fl_id], [fl_airc_id_FK], [fl_pln_id_FK], [fl_airP_id_FK], [fl_type], [fl_dateTimeStart], [fl_duration], [fl_dateTimeArrival], [fl_numOfFlights], [fl_periodicity], [fl_priceEconom], [fl_priceBusiness], [fl_priceFirst], [fl_dateTimeStartGMT], [fl_dateTimeArrivalGMT], [fl_status])
        SELECT   [fl_id],
                 [fl_airc_id_FK],
                 [fl_pln_id_FK],
                 [fl_airP_id_FK],
                 [fl_type],
                 [fl_dateTimeStart],
                 [fl_duration],
                 [fl_dateTimeArrival],
                 [fl_numOfFlights],
                 [fl_periodicity],
                 [fl_priceEconom],
                 [fl_priceBusiness],
                 [fl_priceFirst],
                 [fl_dateTimeStartGMT],
                 [fl_dateTimeArrivalGMT],
                 [fl_status]
        FROM     [dbo].[Flight]
        ORDER BY [fl_id] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Flight] OFF;
    END

DROP TABLE [dbo].[Flight];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_Flight]', N'Flight';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_Flight_PK1]', N'Flight_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [dbo].[Passenger]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_Passenger] (
    [pass_id]        INT           IDENTITY (1, 1) NOT NULL,
    [pass_dT_id_FK]  INT           NOT NULL,
    [pass_lastName]  NVARCHAR (50) NOT NULL,
    [pass_firstName] NVARCHAR (50) NOT NULL,
    [pass_birthDate] DATE          NOT NULL,
    [pass_gender]    NVARCHAR (10) NOT NULL,
    [pass_docNumber] NVARCHAR (20) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_Passenger_PK1] PRIMARY KEY CLUSTERED ([pass_id] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[Passenger])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Passenger] ON;
        INSERT INTO [dbo].[tmp_ms_xx_Passenger] ([pass_id], [pass_dT_id_FK], [pass_lastName], [pass_firstName], [pass_birthDate], [pass_gender], [pass_docNumber])
        SELECT   [pass_id],
                 [pass_dT_id_FK],
                 [pass_lastName],
                 [pass_firstName],
                 [pass_birthDate],
                 [pass_gender],
                 [pass_docNumber]
        FROM     [dbo].[Passenger]
        ORDER BY [pass_id] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Passenger] OFF;
    END

DROP TABLE [dbo].[Passenger];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_Passenger]', N'Passenger';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_Passenger_PK1]', N'Passenger_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [dbo].[Payment]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_Payment] (
    [pay_id]      INT            IDENTITY (1, 1) NOT NULL,
    [pay_name]    NVARCHAR (50)  NULL,
    [pay_addCost] DECIMAL (4, 2) NULL,
    CONSTRAINT [tmp_ms_xx_constraint_Payment_PK1] PRIMARY KEY CLUSTERED ([pay_id] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[Payment])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Payment] ON;
        INSERT INTO [dbo].[tmp_ms_xx_Payment] ([pay_id], [pay_name], [pay_addCost])
        SELECT   [pay_id],
                 [pay_name],
                 [pay_addCost]
        FROM     [dbo].[Payment]
        ORDER BY [pay_id] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Payment] OFF;
    END

DROP TABLE [dbo].[Payment];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_Payment]', N'Payment';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_Payment_PK1]', N'Payment_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [dbo].[Plane]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_Plane] (
    [pln_id]         INT           IDENTITY (1, 1) NOT NULL,
    [pln_airc_id_FK] INT           NOT NULL,
    [pln_model]      NVARCHAR (20) NOT NULL,
    [pln_number]     NVARCHAR (50) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_Plane_PK1] PRIMARY KEY CLUSTERED ([pln_id] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[Plane])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Plane] ON;
        INSERT INTO [dbo].[tmp_ms_xx_Plane] ([pln_id], [pln_airc_id_FK], [pln_model], [pln_number])
        SELECT   [pln_id],
                 [pln_airc_id_FK],
                 [pln_model],
                 [pln_number]
        FROM     [dbo].[Plane]
        ORDER BY [pln_id] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Plane] OFF;
    END

DROP TABLE [dbo].[Plane];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_Plane]', N'Plane';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_Plane_PK1]', N'Plane_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [dbo].[Ticket]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_Ticket] (
    [tkt_id]         INT           IDENTITY (1, 1) NOT NULL,
    [tkt_fl_id_FK]   INT           NOT NULL,
    [tkt_pass_id_FK] INT           NOT NULL,
    [tkt_br_id_FK]   INT           NOT NULL,
    [tkt_class]      NVARCHAR (20) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_Ticket_PK1] PRIMARY KEY CLUSTERED ([tkt_id] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[Ticket])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Ticket] ON;
        INSERT INTO [dbo].[tmp_ms_xx_Ticket] ([tkt_id], [tkt_fl_id_FK], [tkt_pass_id_FK], [tkt_br_id_FK], [tkt_class])
        SELECT   [tkt_id],
                 [tkt_fl_id_FK],
                 [tkt_pass_id_FK],
                 [tkt_br_id_FK],
                 [tkt_class]
        FROM     [dbo].[Ticket]
        ORDER BY [tkt_id] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Ticket] OFF;
    END

DROP TABLE [dbo].[Ticket];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_Ticket]', N'Ticket';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_Ticket_PK1]', N'Ticket_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [dbo].[UnexpectedEvent]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_UnexpectedEvent] (
    [uE_id]            INT            IDENTITY (1, 1) NOT NULL,
    [uE_fl_id_FK]      INT            NOT NULL,
    [uE_eventType]     NVARCHAR (50)  NOT NULL,
    [uE_dateTimeEvent] DATETIME       NOT NULL,
    [uE_Duration]      DATETIME       NOT NULL,
    [ue_reason]        NVARCHAR (MAX) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_UnexpectedEvent_PK1] PRIMARY KEY CLUSTERED ([uE_id] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[UnexpectedEvent])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_UnexpectedEvent] ON;
        INSERT INTO [dbo].[tmp_ms_xx_UnexpectedEvent] ([uE_id], [uE_fl_id_FK], [uE_eventType], [uE_dateTimeEvent], [uE_Duration], [ue_reason])
        SELECT   [uE_id],
                 [uE_fl_id_FK],
                 [uE_eventType],
                 [uE_dateTimeEvent],
                 [uE_Duration],
                 [ue_reason]
        FROM     [dbo].[UnexpectedEvent]
        ORDER BY [uE_id] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_UnexpectedEvent] OFF;
    END

DROP TABLE [dbo].[UnexpectedEvent];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_UnexpectedEvent]', N'UnexpectedEvent';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_UnexpectedEvent_PK1]', N'UnexpectedEvent_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating [dbo].[AirPort_City_FK]...';


GO
ALTER TABLE [dbo].[AirPort] WITH NOCHECK
    ADD CONSTRAINT [AirPort_City_FK] FOREIGN KEY ([airP_city_id_FK]) REFERENCES [dbo].[City] ([city_id]);


GO
PRINT N'Creating [dbo].[Flight_AirPort_FK]...';


GO
ALTER TABLE [dbo].[Flight] WITH NOCHECK
    ADD CONSTRAINT [Flight_AirPort_FK] FOREIGN KEY ([fl_airP_id_FK]) REFERENCES [dbo].[AirPort] ([airP_id]);


GO
PRINT N'Creating [dbo].[Buyer_Payment_FK]...';


GO
ALTER TABLE [dbo].[Buyer] WITH NOCHECK
    ADD CONSTRAINT [Buyer_Payment_FK] FOREIGN KEY ([br_pay_id_FK]) REFERENCES [dbo].[Payment] ([pay_id]);


GO
PRINT N'Creating [dbo].[Ticket_Buyer_FK]...';


GO
ALTER TABLE [dbo].[Ticket] WITH NOCHECK
    ADD CONSTRAINT [Ticket_Buyer_FK] FOREIGN KEY ([tkt_br_id_FK]) REFERENCES [dbo].[Buyer] ([br_id]);


GO
PRINT N'Creating [dbo].[City_Country_FK]...';


GO
ALTER TABLE [dbo].[City] WITH NOCHECK
    ADD CONSTRAINT [City_Country_FK] FOREIGN KEY ([city_cntr_id_FK]) REFERENCES [dbo].[Country] ([cntr_id]);


GO
PRINT N'Creating [dbo].[Passenger_DocType_FK]...';


GO
ALTER TABLE [dbo].[Passenger] WITH NOCHECK
    ADD CONSTRAINT [Passenger_DocType_FK] FOREIGN KEY ([pass_dT_id_FK]) REFERENCES [dbo].[DocType] ([dT_id]);


GO
PRINT N'Creating [dbo].[Event_Flight_FK]...';


GO
ALTER TABLE [dbo].[Event] WITH NOCHECK
    ADD CONSTRAINT [Event_Flight_FK] FOREIGN KEY ([e_fl_id_FK]) REFERENCES [dbo].[Flight] ([fl_id]);


GO
PRINT N'Creating [dbo].[Flight_Aircompany_FK]...';


GO
ALTER TABLE [dbo].[Flight] WITH NOCHECK
    ADD CONSTRAINT [Flight_Aircompany_FK] FOREIGN KEY ([fl_airc_id_FK]) REFERENCES [dbo].[Aircompany] ([airc_id]);


GO
PRINT N'Creating [dbo].[Flight_Plane_FK]...';


GO
ALTER TABLE [dbo].[Flight] WITH NOCHECK
    ADD CONSTRAINT [Flight_Plane_FK] FOREIGN KEY ([fl_pln_id_FK]) REFERENCES [dbo].[Plane] ([pln_id]);


GO
PRINT N'Creating [dbo].[Ticket_Flight_FK]...';


GO
ALTER TABLE [dbo].[Ticket] WITH NOCHECK
    ADD CONSTRAINT [Ticket_Flight_FK] FOREIGN KEY ([tkt_fl_id_FK]) REFERENCES [dbo].[Flight] ([fl_id]);


GO
PRINT N'Creating [dbo].[UnexpectedEvent_Flight_FK]...';


GO
ALTER TABLE [dbo].[UnexpectedEvent] WITH NOCHECK
    ADD CONSTRAINT [UnexpectedEvent_Flight_FK] FOREIGN KEY ([uE_fl_id_FK]) REFERENCES [dbo].[Flight] ([fl_id]);


GO
PRINT N'Creating [dbo].[Ticket_Passenger_FK]...';


GO
ALTER TABLE [dbo].[Ticket] WITH NOCHECK
    ADD CONSTRAINT [Ticket_Passenger_FK] FOREIGN KEY ([tkt_pass_id_FK]) REFERENCES [dbo].[Passenger] ([pass_id]);


GO
PRINT N'Creating [dbo].[Plane_Aircompany_FK]...';


GO
ALTER TABLE [dbo].[Plane] WITH NOCHECK
    ADD CONSTRAINT [Plane_Aircompany_FK] FOREIGN KEY ([pln_airc_id_FK]) REFERENCES [dbo].[Aircompany] ([airc_id]);


GO
PRINT N'Creating [dbo].[NoMoreThanOneStartEvent]...';


GO
--Триггер, який перевіряє, що для кожного рейсу не більше однієї події "вилетів"
CREATE TRIGGER [NoMoreThanOneStartEvent]
ON [dbo].[Event] 
AFTER INSERT, UPDATE
AS
	DECLARE @idFlight INT = (SELECT [e_fl_id_FK] FROM inserted);
	DECLARE @EventCount INT;
	SET @EventCount = (SELECT COUNT (*)
	FROM [dbo].[Event]
	WHERE [e_fl_id_FK] = @idFlight AND [e_eventType] = N'Вилетів');
	IF (@EventCount > 1)
	BEGIN
		RAISERROR (N'Літак не може вилетіти 2 рази підряд. Така подія вже існує.', 5, 1);
		ROLLBACK TRAN;
	END
GO
PRINT N'Creating [dbo].[NoMoreThanOneArrivalEvent]...';


GO
--Триггер, який перевіряє, що для кожного рейсу не більше однієї події "прибув"
CREATE TRIGGER [NoMoreThanOneArrivalEvent]
ON [dbo].[Event] 
AFTER INSERT, UPDATE
AS
	DECLARE @idFlight INT = (SELECT [e_fl_id_FK] FROM inserted);
	DECLARE @EventCount INT;
	SET @EventCount = (SELECT COUNT (*)
	FROM [dbo].[Event]
	WHERE [e_fl_id_FK] = @idFlight AND [e_eventType] = N'Прибув');
	IF (@EventCount > 1)
	BEGIN
		RAISERROR (N'Літак не може прибути 2 рази підряд. Така подія вже існує.', 5, 2);
		ROLLBACK TRAN;
	END
GO
PRINT N'Creating [dbo].[NoArriveWithoutStart]...';


GO
--Триггер, який перевіряє, при вставці "прибув" чи вже існує запис про отравлення
CREATE TRIGGER [NoArriveWithoutStart]
ON [dbo].[Event] 
AFTER INSERT, UPDATE
AS
	DECLARE @idFlight INT = (SELECT [e_fl_id_FK] FROM inserted);
	DECLARE @EventCount INT;
	DECLARE @EventType NVARCHAR(50) = (SELECT [e_eventType] FROM inserted);
	SET @EventCount = (SELECT COUNT (*)
	FROM [dbo].[Event]
	WHERE [e_fl_id_FK] = @idFlight AND [e_eventType] = N'Вилетів');
	IF (@EventCount = 0 AND @EventType = N'Прибув')
	BEGIN
		RAISERROR (N'Літак не може прибути, так як він не вилетів. Створіть подію виліту.', 5, 2);
		ROLLBACK TRAN;
	END
GO
PRINT N'Creating [dbo].[StartIsEarlierThanArrive]...';


GO
--Триггер, перевіряючий, що подія "вилетів" раніше, ніж "прибув"
--DROP TRIGGER [StartIsEarlierThanArrive]
CREATE TRIGGER [StartIsEarlierThanArrive]
ON [dbo].[Event]
AFTER INSERT, UPDATE
AS
	DECLARE @DateTimeStart DATETIME;
	DECLARE @DateTimeArrive DATETIME;
	DECLARE @FlightID INT = (SELECT [e_fl_id_FK] FROM inserted)
	DECLARE @Count INT = (SELECT COUNT (*) FROM [dbo].[Event] WHERE [e_fl_id_FK] = @FlightID AND [e_eventType] = N'Вилетів');
	IF (@Count = 1)
	BEGIN
		SET @DateTimeStart = (SELECT [e_dateTimeEvent] FROM [dbo].[Event] WHERE [e_fl_id_FK] = @FlightID AND [e_eventType] = N'Вилетів')
		SET @DateTimeArrive = (SELECT [e_dateTimeEvent] FROM inserted);
		IF (@DateTimeStart > @DateTimeArrive)
		BEGIN
			RAISERROR (N'Літак не може прибути раніше, ніж вилетів. Перевірте коректність заповнених даних чи відредагуйте подію виліту', 5, 2);
			ROLLBACK TRAN;
		END
	END
GO
PRINT N'Creating [dbo].[StatusStart]...';


GO
--Триггер на автоматичне формування статуса рейсу "вилетів"
CREATE TRIGGER [StatusStart]
ON [dbo].[Event]
FOR INSERT, UPDATE
AS
	DECLARE @idFlight INT;
	SET @idFlight = (SELECT [e_fl_id_FK] FROM inserted);
	DECLARE @EventType NVARCHAR (50) = (SELECT [e_eventType] FROM inserted);
	DECLARE @Arrived INT = (SELECT COUNT (*) FROM [dbo].[Event] WHERE [e_fl_id_FK] = @idFlight AND [e_eventType] = N'Прибув')
	IF (@EventType = N'Вилетів' AND @Arrived = 0)
	BEGIN
		UPDATE [dbo].[Flight]
		SET [fl_status] = N'Вилетів'
		WHERE [fl_id] = @idFlight
	END
GO
PRINT N'Creating [dbo].[AutoArrived]...';


GO
--Триггер на формування статусу "прибув"
CREATE TRIGGER [AutoArrived]
ON [dbo].[Event]
FOR INSERT, UPDATE
AS
	DECLARE @EventType NVARCHAR (50) = (SELECT [e_eventType] FROM inserted);
	DECLARE @idFlight INT = (SELECT [e_fl_id_FK] FROM inserted);
	IF (@EventType = N'Прибув')
	BEGIN
		UPDATE [dbo].[Flight]
		SET [fl_status] = N'Прибув'
		WHERE [fl_id] = @idFlight
	END
GO
PRINT N'Creating [dbo].[NoEventsIfCancelled]...';


GO
--Триггер, що забороняє створювати події, якщо рейс скасовано
CREATE TRIGGER [NoEventsIfCancelled]
ON [dbo].[Event]
AFTER INSERT, UPDATE
AS
	DECLARE @CountCancelEvents INT;
	DECLARE @idFlight INT = (SELECT [e_fl_id_FK] FROM inserted);
	SET @CountCancelEvents = (
	SELECT COUNT (*) 
	FROM [dbo].[UnexpectedEvent] 
	WHERE [uE_fl_id_FK] = @idFlight AND [uE_eventType] = N'Скасовано');
	IF (@CountCancelEvents >= 1)
	BEGIN
		RAISERROR (N'Рейс скасовано, створити подію неможливоо.', 5, 1)
		ROLLBACK TRAN;
	END
GO
PRINT N'Creating [dbo].[AutoDateTimeArrival]...';


GO
--Триггер на автоматичне заповнення часу прибуття і місцевого часу.
CREATE TRIGGER [AutoDateTimeArrival]
ON [dbo].[Flight]
AFTER INSERT, UPDATE
AS
	UPDATE [dbo].[Flight]
	SET [fl_dateTimeArrival] = [Flight].[fl_dateTimeStart] + [Flight].[fl_duration]
	FROM inserted
	DECLARE @GMT DATETIME = (
		SELECT DISTINCT [city_GMT]
		FROM [dbo].[City] c
			INNER JOIN 
				[AirPort] a
		ON 
			c.[city_id] = a.[airP_city_id_FK] AND a.[airP_id] = (SELECT DISTINCT [fl_airP_id_FK] FROM inserted)
	)
	
	DECLARE @GMTSign NVARCHAR(1) = (
		SELECT DISTINCT [city_signGMT] 
		FROM [dbo].[City] c
			INNER JOIN 
				[AirPort] a
		ON 
			c.[city_id] = a.[airP_city_id_FK] AND a.[airP_id] = (SELECT DISTINCT [airP_id] FROM inserted)
	)
	
	DECLARE @MyGMT DATETIME = (
		SELECT [city_GMT] FROM [dbo].[City] WHERE [city_id] = 1
	)
	
	DECLARE @FlightType NVARCHAR (20) = (
	SELECT DISTINCT [fl_type] FROM inserted
	)
	
	IF (@GMTSign = '+' AND @FlightType = 'Вхідний')
	BEGIN
		UPDATE [dbo].[Flight]
		SET [fl_dateTimeStartGMT] = [Flight].[fl_dateTimeStart] + @GMT - @MyGMT
		FROM inserted
		
		UPDATE [dbo].[Flight]
		SET [fl_dateTimeArrivalGMT] = [Flight].[fl_dateTimeArrival]
		FROM inserted
	END
	
	IF (@GMTSign = '-' AND @FlightType = 'Вхідний')
	BEGIN
		UPDATE [dbo].[Flight]
		SET [fl_dateTimeStartGMT] = [Flight].[fl_dateTimeStart] - @GMT - @MyGMT
		FROM inserted
		
		UPDATE [dbo].[Flight]
		SET [fl_dateTimeArrivalGMT] = [Flight].[fl_dateTimeArrival] + @GMT - @MyGMT
		FROM inserted
	END
	
	IF (@GMTSign = '+' AND @FlightType = 'Вихідний')
	BEGIN
		UPDATE [dbo].[Flight]
		SET [fl_dateTimeArrivalGMT] = [Flight].[fl_dateTimeArrival] + @GMT - @MyGMT
		FROM inserted
		
		UPDATE [dbo].[Flight]
		SET [fl_dateTimeStartGMT] = [Flight].[fl_dateTimeStart]
		FROM inserted
	END
	
	IF (@GMTSign = '-' AND @FlightType = 'Вихідний')
	BEGIN
		UPDATE [dbo].[Flight]
		SET [fl_dateTimeArrivalGMT] = [Flight].[fl_dateTimeArrival] - @GMT - @MyGMT
		FROM inserted
		
		UPDATE [dbo].[Flight]
		SET [fl_dateTimeStartGMT] = [Flight].[fl_dateTimeStart]
		FROM inserted
	END
GO
PRINT N'Creating [dbo].[AutoAddPeriodicalFlights]...';


GO
--Додавання періодичних рейсів

--Додавання записів про періодичний рейс за допомогою циклу while
CREATE TRIGGER [AutoAddPeriodicalFlights]
ON [dbo].[Flight]
AFTER INSERT
AS
	DECLARE @Count INT = 0;
	DECLARE @GlobalCount INT = (SELECT [fl_numOfFlights] FROM inserted);
	SET @Count = (SELECT [fl_numOfFlights] FROM inserted);
	DECLARE @DateTimeStartGlobal DATETIME = (SELECT [fl_dateTimeStart] FROM inserted);
	
	UPDATE [dbo].[Flight]
	SET [fl_status] = N'По расписанию'
	WHERE [fl_id] = (SELECT [fl_id] FROM inserted)
	
	DECLARE @id INT;
		DECLARE @idAirCompany INT;
		DECLARE @idPlane INT;
		DECLARE @idAirPort INT;
		DECLARE @FlightType NVARCHAR (20);
		DECLARE @DateTimeStart DATETIME;
		DECLARE @Duration DATETIME;
		DECLARE @Periodicity DATETIME;
		DECLARE @PriceEconom INT;
		DECLARE @PriceBusiness INT;
		DECLARE @PriceFirst INT;

		SET @idAirCompany = (SELECT [fl_airc_id_FK] FROM inserted);
		SET @idAirPort = (SELECT [fl_airP_id_FK] FROM inserted);
		SET @idPlane = (SELECT [fl_pln_id_FK] FROM inserted);
		SET @FlightType = (SELECT [fl_type] FROM inserted);
		SET @Periodicity = (SELECT [fl_periodicity] FROM inserted);
		SET @DateTimeStart = (SELECT [fl_dateTimeStart] FROM inserted)
		
		SET @Duration = (SELECT [fl_duration] FROM inserted);
		SET @PriceEconom = (SELECT [fl_priceEconom] FROM inserted);
		SET @PriceBusiness = (SELECT [fl_priceBusiness] FROM inserted);
		SET @PriceFirst = (SELECT [fl_priceFirst] FROM inserted);
	
	WHILE (@Count > 1)
	BEGIN
		SET @id = (SELECT TOP (1) [fl_id]  FROM [dbo].[Flight] ORDER BY [fl_id] DESC) + 1;
		SET @DateTimeStart = @DateTimeStart + @Periodicity;
		SET @Count = @Count - 1;
		
		INSERT INTO [dbo].[Flight] 
		([fl_airc_id_FK],[fl_pln_id_FK], [fl_airP_id_FK], [fl_type], [fl_dateTimeStart], [fl_duration],
			[fl_numOfFlights], [fl_periodicity], [fl_priceEconom], [fl_priceBusiness], [fl_priceFirst], [fl_status])
		VALUES
		(@idAirCompany, @idPlane, @idAirPort, @FlightType, @DateTimeStart, @Duration, @Count, @Periodicity, @PriceEconom, @PriceBusiness, @PriceFirst, N'За роскладом')
	END
GO
PRINT N'Creating [dbo].[DocNumberMatchesToRE]...';


GO
--Триггер, що перевіряє, що заповнене поле "номер документа", що посвідчує особу пасажира, відповідає регулярному виразу
CREATE TRIGGER [DocNumberMatchesToRE]
ON [dbo].[Passenger]
AFTER INSERT, UPDATE
AS
	DECLARE @Doc INT = (SELECT [pass_dT_id_FK] FROM inserted);
	DECLARE @RE NVARCHAR (100) = (SELECT [dT_regularExpression] FROM [dbo].[DocType] WHERE [dT_id] = @Doc);
	DECLARE @DocNum NVARCHAR (20) = (SELECT [pass_docNumber] FROM inserted);
	IF (@DocNum NOT LIKE @RE)
	BEGIN
		RAISERROR (N'Невірно введено номер документа.', 5, 6);
		ROLLBACK TRAN;
	END
GO
PRINT N'Creating [dbo].[NoDelayOrCancellIfStarted]...';


GO
--Триггер, що забороняє створювати подію "Затримується" або "Скасовано", якщо літак вже вилетів
CREATE TRIGGER [NoDelayOrCancellIfStarted]
ON [dbo].[UnexpectedEvent]
AFTER INSERT, UPDATE
AS
	DECLARE @CountStartEvents INT;
	DECLARE @idFlight INT = (SELECT [uE_fl_id_FK] FROM inserted);
	SET @CountStartEvents = (
	SELECT COUNT (*) 
	FROM [dbo].[Event] 
	WHERE [e_fl_id_FK] = @idFlight AND [e_eventType] = N'Вилетів');
	IF (@CountStartEvents = 1)
	BEGIN
		RAISERROR (N'Літак вже вилетів, рейс не може бути затриманий або скасований.', 5, 1)
		ROLLBACK TRAN;
	END
GO
PRINT N'Creating [dbo].[DelayedOrCalcelled]...';


GO
--Триггер, що формує статус "Затримується" або "Скасовано"
CREATE TRIGGER [DelayedOrCalcelled]
ON [dbo].[UnexpectedEvent]
AFTER INSERT, UPDATE
AS
	DECLARE @idFlight INT = (
	SELECT [uE_fl_id_FK] 
	FROM 
	inserted);
	UPDATE [Flight]
	SET [fl_status] = (SELECT [uE_eventType] FROM inserted)
	WHERE [fl_id] = @idFlight;
GO
PRINT N'Refreshing [dbo].[FlightsAndEvents]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[FlightsAndEvents]';


GO
PRINT N'Refreshing [dbo].[UnexpEv]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[UnexpEv]';


GO
PRINT N'Refreshing [dbo].[Buy]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[Buy]';


GO
PRINT N'Refreshing [dbo].[allCityCountry]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[allCityCountry]';


GO
PRINT N'Refreshing [dbo].[DeleteAirPort]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[DeleteAirPort]';


GO
PRINT N'Refreshing [dbo].[FlightsByCity]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[FlightsByCity]';


GO
PRINT N'Refreshing [dbo].[FlightsByCountry]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[FlightsByCountry]';


GO
PRINT N'Refreshing [dbo].[FlightsWithEvents]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[FlightsWithEvents]';


GO
PRINT N'Refreshing [dbo].[FutureFlights]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[FutureFlights]';


GO
PRINT N'Refreshing [dbo].[GetAirPort]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[GetAirPort]';


GO
PRINT N'Refreshing [dbo].[InsertAirPort]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[InsertAirPort]';


GO
PRINT N'Refreshing [dbo].[Passeng]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[Passeng]';


GO
PRINT N'Refreshing [dbo].[PastFlights]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[PastFlights]';


GO
PRINT N'Refreshing [dbo].[SelectAirPortList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[SelectAirPortList]';


GO
PRINT N'Refreshing [dbo].[SelectFlights]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[SelectFlights]';


GO
PRINT N'Refreshing [dbo].[SelectRefAirPortListByCity]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[SelectRefAirPortListByCity]';


GO
PRINT N'Refreshing [dbo].[UEvents]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[UEvents]';


GO
PRINT N'Refreshing [dbo].[UpdateAirPort]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[UpdateAirPort]';


GO
PRINT N'Refreshing [dbo].[Buyers]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[Buyers]';


GO
PRINT N'Refreshing [dbo].[TotalCost]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[TotalCost]';


GO
PRINT N'Refreshing [dbo].[AllCity]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[AllCity]';


GO
PRINT N'Refreshing [dbo].[CityDelete]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[CityDelete]';


GO
PRINT N'Refreshing [dbo].[CityInsert]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[CityInsert]';


GO
PRINT N'Refreshing [dbo].[CityUpdate]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[CityUpdate]';


GO
PRINT N'Refreshing [dbo].[GetCity]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[GetCity]';


GO
PRINT N'Refreshing [dbo].[RefSelectCitiesListByID]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[RefSelectCitiesListByID]';


GO
PRINT N'Refreshing [dbo].[SelectCitiesList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[SelectCitiesList]';


GO
PRINT N'Refreshing [dbo].[CountriesSelect]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[CountriesSelect]';


GO
PRINT N'Refreshing [dbo].[CountryDelete]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[CountryDelete]';


GO
PRINT N'Refreshing [dbo].[CountryInsert]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[CountryInsert]';


GO
PRINT N'Refreshing [dbo].[CountryUpdate]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[CountryUpdate]';


GO
PRINT N'Refreshing [dbo].[GetCountry]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[GetCountry]';


GO
PRINT N'Refreshing [dbo].[RefCountriesSelect]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[RefCountriesSelect]';


GO
PRINT N'Refreshing [dbo].[DeleteFlight]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[DeleteFlight]';


GO
PRINT N'Refreshing [dbo].[GetFlight]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[GetFlight]';


GO
PRINT N'Refreshing [dbo].[InsertFlight]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[InsertFlight]';


GO
PRINT N'Refreshing [dbo].[UpdateFlight]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[UpdateFlight]';


GO
PRINT N'Refreshing [dbo].[AircompWithPlanes]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[AircompWithPlanes]';


GO
PRINT N'Refreshing [dbo].[DeletePlane]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[DeletePlane]';


GO
PRINT N'Refreshing [dbo].[GetPlane]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[GetPlane]';


GO
PRINT N'Refreshing [dbo].[InsertPlane]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[InsertPlane]';


GO
PRINT N'Refreshing [dbo].[SelectAirplaneList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[SelectAirplaneList]';


GO
PRINT N'Refreshing [dbo].[SelectRefPlaneList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[SelectRefPlaneList]';


GO
PRINT N'Refreshing [dbo].[UpdatePlane]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[UpdatePlane]';


GO
PRINT N'Refreshing [dbo].[CountTickets]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[CountTickets]';


GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [dbo].[AirPort] WITH CHECK CHECK CONSTRAINT [AirPort_City_FK];

ALTER TABLE [dbo].[Flight] WITH CHECK CHECK CONSTRAINT [Flight_AirPort_FK];

ALTER TABLE [dbo].[Buyer] WITH CHECK CHECK CONSTRAINT [Buyer_Payment_FK];

ALTER TABLE [dbo].[Ticket] WITH CHECK CHECK CONSTRAINT [Ticket_Buyer_FK];

ALTER TABLE [dbo].[City] WITH CHECK CHECK CONSTRAINT [City_Country_FK];

ALTER TABLE [dbo].[Passenger] WITH CHECK CHECK CONSTRAINT [Passenger_DocType_FK];

ALTER TABLE [dbo].[Event] WITH CHECK CHECK CONSTRAINT [Event_Flight_FK];

ALTER TABLE [dbo].[Flight] WITH CHECK CHECK CONSTRAINT [Flight_Aircompany_FK];

ALTER TABLE [dbo].[Flight] WITH CHECK CHECK CONSTRAINT [Flight_Plane_FK];

ALTER TABLE [dbo].[Ticket] WITH CHECK CHECK CONSTRAINT [Ticket_Flight_FK];

ALTER TABLE [dbo].[UnexpectedEvent] WITH CHECK CHECK CONSTRAINT [UnexpectedEvent_Flight_FK];

ALTER TABLE [dbo].[Ticket] WITH CHECK CHECK CONSTRAINT [Ticket_Passenger_FK];

ALTER TABLE [dbo].[Plane] WITH CHECK CHECK CONSTRAINT [Plane_Aircompany_FK];


GO
PRINT N'Update complete.';


GO
